{"version":3,"sources":["components/view/LoginView.js","components/ui/Header.js","stores/Auth.js","components/useStore.js","components/ui/SideBar.js","components/ui/HeaderController.js","components/ui/GroupForm.js","components/ui/Member.js","components/ui/GroupMember.js","test.js","components/ui/Char.js","components/ui/Timer.js","components/ui/ElementLeft.js","components/ui/ElementRight.js","components/ui/UserInfoModal.js","components/ui/BoardList.js","components/ui/BoardListView.js","components/ui/PostList.js","components/view/LoginController.js","components/view/SignUpView.js","components/view/SignUpController.js","components/view/HomeView.js","components/view/HomeController.js","components/view/GroupView.js","components/view/GroupController.js","components/view/GroupListView.js","components/view/GroupListController.js","components/view/UserInfoView.js","components/view/UserInfoController.js","components/view/GroupMakeView.js","components/view/GroupMakeController.js","components/view/BoardView.js","components/view/BoardController.js","components/view/IdView.js","components/view/IdController.js","components/view/PwView.js","components/view/PwController.js","components/view/MystudyView.js","components/view/MystudyController.js","components/view/Test.js","components/ViewModel.js","components/Model.js","components/Provider.js","App.js","reportWebVitals.js","index.js"],"names":["LoginView","props","Grid","container","direction","className","type","placeholder","onChange","onIdChange","onPwChange","onClick","login","Divider","to","Header","Button","sideBarOpen","Menu","style","fontSize","header","Auth","observable","isLogged","data","init","this","JSON","parse","localStorage","getItem","userData","setItem","stringify","logout","clear","useStore","SideBar","history","useHistory","sideBarClose","Close","user_id","replace","undefined","HeaderController","useState","open","setOpen","Groupform","list","groupdata","map","index","study_id","key","current_user_count","capacity","study_name","study_total_time","created_at","Member","user_name","exercise_state","start_time","setStartTime","exState","setExState","hours","setHours","minutes","setMinutes","seconds","setSeconds","useEffect","t","Date","h","parseInt","m","s","diff_s","getSeconds","diff_m","getMinutes","diff_h","getHours","WebSocket","onmessage","e","time","d","ddif_s","countdown","setInterval","clearInterval","GroupMember","groupmembers","exercise_start_time","unityContext","UnityContext","loaderUrl","dataUrl","frameworkUrl","codeUrl","Char","on","canvas","width","height","getContext","matchWebGLToCanvasSize","Timer","NativeSelect","exerciseChange","aria-label","value","message","status","start","stop","ElementLeft","item","xs","content","ElementRight","UserInfoModal","Modal","onClose","handleClose","aria-labelledby","aria-describedby","Paper","arm_exp","chest_exp","back_exp","shoulder_exp","belly_exp","leg_exp","BoardList","onboardnameChange","makeboard","boardlist","onClickboard","BoardListView","element","board_id","href","ev","preventDefault","board_name","PostList","postlist","onpost","post_id","post_title","substring","LoginController","viewModel","id","setId","pw","setPw","a","connect","alert","target","SignupView","message1","onEmailChange","message7","message2","onPwCheChange","message3","onNameChange","message4","genderChange","message5","questChange","message6","onHintChange","message8","Signup","SignupController","email","setEmail","cpw","setCpw","name","setName","gender","setGender","quest","setQuest","hint","setHint","setMessage1","setMessage2","setMessage3","setMessage4","setMessage5","setMessage6","setMessage7","setMessage8","checkAlphaNum","str","test","signUp","HomeView","run","HomeController","setTime","interv","setInterv","setStatus","setmessage","expart","setExpart","today","updatedH","updatedM","updatedS","levelChange","times","Headandchest_level","levelcheck1","Back_level","levelcheck2","Arm_level","Lowerbody_level","Abs_level","Shoulder_level","Gender","send","parttime","now","exercise","GroupView","groupname","groupmember","ismember","join","disjoin","Exercisemember","GroupController","useRef","memberlist","setMemberlist","studydetail","setStudydetail","setgroupname","setgroupmember","setExercisemember","setIsmember","location","pathname","getmember","member","find","filter","length","getstudy_detail","study_detail","GrouplistView","GroupForm","Fab","make","GrouplistController","setList","getlist","ColorButton","withStyles","root","backgroundColor","margin","UserInfoView","variant","handleOpen","color","state","pwChange","onCpwChange","UserInfoController","setMessage","setState","changepw","GroupMakeView","onStudyChange","CapacityChange","MakeStudy","GroupMakeController","user","study","setStudy","setCapacity","makeStudy","BoardView","board","boardtitle","changestate","onRename","boardupdate","makepost","deleteboard","change","ontitleChange","oncontentChange","post","back","posttitle","postuser","postcreat","postcontent","deletepost","postupdatestate","onposttitleChange","onpostcontentChange","updatepost","BoardController","setBoardlist","setPostlist","setBoard_name","setBoard","setBoardtitle","setChangestate","rename","setRename","postid","setPostid","title","setTitle","setContent","setPosttitle","setPostcontent","setPostcreate","setPostuser","updatetitle","setUpdatetitle","updatecontent","setUpdatecontent","getboardlist","del","onboard","boardpostlist","getdetail","postdetail","post_content","alltime","updated_at","idx","indexOf","date","board_delete","board_update","IdView","IdController","findid","detail","PwView","onQuestChange","findPw","PwController","userid","setUserid","findpw","user_pw","MystudyView","MystudyController","mylist","Test","socket","onopen","room_name","ViewModel","model","btn","board_search","bind","Model","loginData","axios","then","res","loginSuccess","catch","error","response","silentRefresh","accessToken","defaults","headers","common","get","question_number","Number","err","socketPath","Provider","exact","path","render","SignUpController","GroupListController","xsrfCookieName","xsrfHeaderName","withCredentials","App","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.a6c5c310.chunk.js","sourcesContent":["//로그인 화면을 결정하는 view\r\nimport React from 'react';\r\nimport { Grid, Divider } from '@material-ui/core';\r\nimport { Link } from 'react-router-dom';\r\n\r\nconst LoginView = (props) => {\r\n    return (\r\n        <Grid container direction='column'>\r\n            <Grid className='contents'>\r\n                <Grid className='logo'>HELP</Grid>\r\n                <input\r\n                    type='text'\r\n                    className='login' \r\n                    placeholder={'아이디'}\r\n                    onChange={props.onIdChange}\r\n                />\r\n                <input\r\n                    type='password'\r\n                    className='login'\r\n                    placeholder={'비밀번호'}\r\n                    onChange={props.onPwChange}\r\n                />\r\n                <button type='button' className='loginbtn' onClick={props.login}>로그인</button>\r\n                <Divider className='logindivider' />\r\n                <Grid className='link'>\r\n                <Link className='a' to={'/findid'}>아아디 찾기</Link>\r\n                |<Link className='a' to={'/findpw'}>비밀번호 찾기</Link>\r\n                |<Link className='a' to={'/signup'}>회원가입</Link>\r\n                </Grid>\r\n            </Grid>\r\n        </Grid>\r\n    )    \r\n};\r\n\r\nexport default LoginView;","//모든화면 상단에 위치하며 페이지의 이름을 보여준다.\r\nimport React from 'react';\r\nimport { Grid, Button } from '@material-ui/core';\r\nimport { Menu } from '@material-ui/icons';\r\n\r\nconst Header = (props) => {\r\n    return (\r\n        <Grid className='header'>\r\n            <Button onClick={props.sideBarOpen}>\r\n                <Menu className='sidebar_button'style={{ fontSize: '10vh' }}/>\r\n            </Button>\r\n            {props.header}\r\n        </Grid>\r\n    )\r\n};\r\n\r\nexport default Header;","//로그인 되었을때 저장되는 정보들\r\nimport { observable } from 'mobx';\r\n\r\nconst Auth = observable({\r\n    isLogged: false,    //로그인 됨=true,안됨=false\r\n    data: {},           //로그인 한 유저의 정보\r\n\r\n    init() {\r\n        this.data = JSON.parse(localStorage.getItem('userInfo'));\r\n        if (this.data != null)\r\n            this.isLogged = true;\r\n        else {\r\n            this.isLogged = false;\r\n        }\r\n    },\r\n    login(userData) {//로그인시 유저 정보 저장\r\n        this.isLogged = true;\r\n        this.data = userData;\r\n        localStorage.setItem('userInfo', JSON.stringify(userData));\r\n    },\r\n    logout() {//로그아웃시 저장된 정보 clear\r\n        this.isLogged = false;\r\n        localStorage.clear();\r\n    },\r\n});\r\n\r\nexport default Auth;","//1.유저정보를 받아와서 {Auth}에 저장\r\n//2.유저정보를 {Auth}에서 받아와 페이지별로 전달\r\nimport { Auth } from '../stores';\r\n\r\nconst useStore = () => ({ Auth });\r\n\r\nexport default useStore;","//사이드바의 화면을 결정하는 코드\r\nimport React from 'react';\r\nimport { Grid, Button, Divider } from '@material-ui/core';\r\nimport { Close } from '@material-ui/icons';\r\nimport { Link, useHistory } from 'react-router-dom';\r\n\r\nimport useStore from '../useStore';\r\nconst SideBar = (props) => {\r\n\tconst { Auth } = useStore();\r\n\tconst history = useHistory();\r\n\tconst test = () => { //로그아웃버튼 클릭후 실행 (로그아웃+홈화면)\r\n\t\tAuth.logout();\r\n\t\thistory.replace('/');\r\n\t}\r\n    return (\r\n        <Grid className='sidebar'>\r\n            <Grid className=\"sidebar-header\">\r\n\t\t\t\t<Button onClick={props.sideBarClose} className='close-button'>\r\n\t\t\t\t\t<Close />\r\n\t\t\t\t</Button>\r\n\t\t\t</Grid>\r\n\t\t\t{\r\n\t\t\t\tAuth.isLogged?\r\n\t\t\t\t<Link to='/info' className='sidebar-link'>\r\n\t\t\t\t\t<Button className='login-button'>\r\n\t\t\t\t\t\t{Auth.data.user_id}\r\n\t\t\t\t\t</Button>\r\n\t\t\t\t</Link>\r\n\t\t\t\t:\t\t\r\n\t\t\t\t<Link to='login' className='sidebar-link'>\r\n\t\t\t\t\t<Button className='login-button'>\r\n\t\t\t\t\t\t로그인\r\n\t\t\t\t\t</Button>\r\n\t\t\t\t</Link>\r\n\t\t\t}\r\n\t\r\n\t\t\t<Divider />\r\n\t\t\t<Link to='/' className='sidebar-link'>\r\n\t\t\t\t<Button className='sidebar-item'>\r\n\t\t\t\t\t캐릭터\r\n\t\t\t\t</Button>\r\n\t\t\t</Link>\r\n\t\t\t{\r\n\t\t\t\tAuth.isLogged?\r\n\t\t\t<Link to='/mygroup' className='sidebar-link'>\r\n\t\t\t\t<Button className='sidebar-item'>\r\n\t\t\t\t\t내 스터디 목록\r\n\t\t\t\t</Button>\r\n\t\t\t</Link>:''\r\n\t\t\t}\r\n\t\t\t<Link to='/grouplist' className='sidebar-link'>\r\n\t\t\t\t<Button className='sidebar-item'>\r\n\t\t\t\t\t스터디 목록\r\n\t\t\t\t</Button>\r\n\t\t\t</Link>\r\n\t\t\t<Link to='/board' className='sidebar-link'>\r\n\t\t\t\t<Button className='sidebar-item'>\r\n\t\t\t\t\t게시판\r\n\t\t\t\t</Button>\r\n\t\t\t</Link>\r\n\t\t\t{\r\n\t\t\t\tAuth.isLogged?\r\n\t\t\t\t<Button className='login-button' onClick={test}>\r\n\t\t\t\t\t로그아웃\r\n\t\t\t\t</Button>\r\n\t\t\t\t:\t\t\r\n\t\t\t\tundefined\r\n\t\t\t}\r\n        </Grid>\r\n    )\r\n};\r\n\r\nexport default SideBar;","//모든화면 상단에 위치하며 좌측상단에 사이드바 매뉴를 보여주는 버튼이 있는 UI이다.\r\n\r\nimport React, { useState } from 'react';\r\n\r\nimport Header from './Header';\r\nimport SideBar from './SideBar';\r\n\r\nconst HeaderController = (props) => {\r\n    const [open, setOpen] = useState(0); // 값에따라 사이드바를 볼 수 있다.\r\n\r\n    const sideBarOpen = () => { // 사이드바를 보여주기위해 open을 1로 설정\r\n        setOpen(1);\r\n    }\r\n    const sideBarClose = () => {// 사이드바를 닫기위해 open을 2로 설정\r\n        setOpen(0);\r\n    }\r\n    return (\r\n        <>\r\n        <Header\r\n            header={props.header}\r\n            sideBarOpen={sideBarOpen}\r\n        />\r\n        {\r\n\t\t\t\topen ?\r\n\t\t\t\t\t<SideBar\r\n\t\t\t\t\t\topen={open}\r\n                        sideBarClose={sideBarClose}\r\n\t\t\t\t\t/> : undefined\r\n\t\t\t}\r\n        </>\r\n    );\r\n};\r\n\r\nexport default HeaderController;","//모든 그룹의정보를  목록으로 보여주는 UI이다.\r\nimport React from 'react';\r\nimport { Grid} from '@material-ui/core';\r\nimport { Link} from 'react-router-dom';\r\nconst Groupform = (props) => {\r\n\r\n    const list = props.groupdata.map( // viewmodel에서 받아온 그룹들 정보목록을 원하는 형태로 가공해준다.\r\n        (groupdata, index) => ( <Link className = 'groups'  to={`/group/${groupdata.study_id}`} key={index}>\r\n            <Grid className = 'member'>인원:{groupdata.current_user_count}/{groupdata.capacity}</Grid>\r\n            <Grid className = 'groupname'>{groupdata.study_name}</Grid>\r\n            <Grid className = 'leader'>스터디 장:{groupdata.user_id}</Grid>\r\n            <Grid className = 'extime'>스터디 운동시간:{groupdata.study_total_time}</Grid>\r\n            <Grid className = 'start'>{groupdata.created_at}</Grid>\r\n        </Link>)\r\n      );\r\n    return (\r\n        <Grid className = 'groupform'>\r\n            {list}\r\n        </Grid>\r\n        )\r\n};                \r\nexport default Groupform;","//스터디 내의 유저들 각각의 정보를 표현해주는 UI (운동상태+운동시간)\r\n\r\nimport React, { useEffect, useState } from 'react';\r\nimport { Grid } from '@material-ui/core';\r\nimport { GiWeightLiftingDown, GiWeightLiftingUp } from \"react-icons/gi\";\r\nimport MemberTimer from './MemberTimer';\r\n\r\nconst Member = (props) => {\r\n  \r\n  //유저의 정보를 원하는 변수에 저장\r\n  const { user_id, user_name, exercise_state, start_time } = props;\r\n  const [startTime, setStartTime] = useState(start_time);\r\n  const [exState, setExState] = useState(exercise_state);\r\n  const [hours, setHours] = useState(0);\r\n  const [minutes, setMinutes] = useState(0);\r\n  const [seconds, setSeconds] = useState(0);\r\n\r\n  //페이지가 렌더링 되고 다른 입력없이 실행되는 함수\r\n  useEffect(() => {\r\n    const t = new Date();\r\n\r\n    //운동을 시작한 시간 (h->시,m->분,s->초)\r\n    let h = parseInt(start_time / 3600); \r\n    let m = parseInt((start_time - h * 3600) / 60); \r\n    let s = parseInt(start_time - h * 3600 - m * 60);\r\n\r\n    //현재시간 - 운동시작시간 = 현재까지 운동한시간\r\n    let diff_s = t.getSeconds() - s;\r\n    let diff_m = t.getMinutes() - m;\r\n    let diff_h = t.getHours() - h;\r\n\r\n    if (diff_s < 0) {\r\n      diff_m--;\r\n      diff_s+= 60;\r\n    }\r\n    if (diff_m < 0) {\r\n      diff_h--;\r\n      diff_m += 60;\r\n    }\r\n\r\n    //운동한 시간을 다른 사람들에게 보여주기위해 원하는 변수에 저장\r\n    setHours(diff_h);\r\n    setMinutes(diff_m);\r\n    setSeconds(diff_s);\r\n    const socketPath = 'ws://ec2-52-78-132-234.ap-northeast-2.compute.amazonaws.com:8000/ws/helpapp/' + user_id;\r\n    const socket = new WebSocket(socketPath);\r\n    socket.onmessage = function (e) {\r\n      const data = JSON.parse(e.data);\r\n      setExState(data.exercise_state);\r\n      setStartTime(data.time);\r\n      h = parseInt(data.time/3600);\r\n      const d = new Date();\r\n\r\n      setHours(d.getHours() - h);\r\n      m = parseInt((data.time - h * 3600) / 60);\r\n      setMinutes(d.getMinutes() - m);\r\n      s = parseInt(data.time - h * 3600 - m * 60);\r\n      let ddif_s = d.getSeconds() - s;\r\n      setSeconds(d.getSeconds() - s);\r\n      if (ddif_s <= 0) {\r\n        setSeconds(1);\r\n      }\r\n    }\r\n  }, []); \r\n  useEffect(() => {\r\n    if (exState === true) { // 유저가 운동중인 상태일경우 유저의 시간을 흐르게해준다.\r\n      const countdown = setInterval(() => {\r\n        if (parseInt(seconds) < 59) {\r\n          setSeconds(parseInt(seconds) + 1);\r\n        }\r\n        if (parseInt(seconds) >= 59) {\r\n          setSeconds(parseInt(seconds - 59));\r\n          setMinutes(parseInt(minutes) + 1);\r\n          if (parseInt(minutes) >= 59) {\r\n            setMinutes(parseInt(minutes - 59));\r\n            setHours(parseInt(hours) + 1);\r\n          }\r\n        }\r\n      }\r\n      , 1000);\r\n      return () => clearInterval(countdown);\r\n    }\r\n  }, [hours, minutes, seconds])\r\n  return (\r\n    <Grid className ='memberstate'>\r\n      {\r\n        exState?\r\n          <GiWeightLiftingUp/>\r\n          :\r\n          <GiWeightLiftingDown/>\r\n      }\r\n      <Grid>\r\n        {user_name}\r\n      </Grid>\r\n      {\r\n        exState?\r\n        <Grid>\r\n          {hours}:{minutes < 10 ? `0${minutes}` : minutes}:{seconds < 10 ? `0${seconds}` : seconds}\r\n        </Grid>\r\n        :\r\n        ''\r\n      }\r\n    </Grid>\r\n  )\r\n}\r\n\r\nexport default Member;","// 스터니 화면에서 멤버들의 운동 상태를 보여주는 화면\r\nimport React, { useEffect, useState } from 'react';\r\nimport {Grid} from '@material-ui/core';\r\nimport { GiWeightLiftingDown, GiWeightLiftingUp } from \"react-icons/gi\";\r\nimport Member from './Member';\r\n\r\nconst GroupMember = (props) => {\r\n\r\n    const list = props.groupmembers.map((groupmembers, index) => {  \r\n            return (\r\n                <Member\r\n                    user_id={groupmembers.user_id}\r\n                    user_name={groupmembers.user_name}\r\n                    start_time={groupmembers.exercise_start_time}\r\n                    exercise_state={groupmembers.exercise_state}\r\n                    key={index}\r\n                />\r\n            )\r\n        });\r\n        \r\n    \r\n    return (\r\n        <Grid>\r\n            {list}\r\n        </Grid>\r\n        )\r\n};                \r\nexport default GroupMember;","import { UnityContext } from 'react-unity-webgl';\r\nexport const unityContext = new UnityContext({\r\n    loaderUrl: 'static/Build/help.loader.js',\r\n    dataUrl: 'static/Build/help.data',\r\n    frameworkUrl: 'static/Build/help.framework.js',\r\n    codeUrl: 'static/Build/help.wasm'\r\n});\r\n","//캐릭터를 보여주는 UI로 실질적으로 유니티의 화면을 받아오는 곳이다.\r\nimport React, { useEffect } from 'react';\r\nimport { Grid } from '@material-ui/core';\r\nimport Unity, { UnityContext } from 'react-unity-webgl';\r\nimport { unityContext } from '../../test';\r\n\r\nconst Char = (props) => {\r\n    useEffect(() => {\r\n        unityContext.on('canvas', (canvas) => { //canvas속성으로 화면의 크기를 정하고 유니티 화면을 받아온다.\r\n            if (canvas !== null) {\r\n                canvas.width = 300;\r\n                canvas.height = 400;\r\n                canvas.getContext('webgl');\r\n            }\r\n        });\r\n    }, []);\r\n    return (\r\n        <Grid className ='drawchar'>\r\n             <Unity \r\n                unityContext={unityContext}\r\n                matchWebGLToCanvasSize={false}\r\n            /> \r\n        </Grid>\r\n    )\r\n};\r\n\r\nexport default Char;","//홈 화면에서 타이머를 화면을 결정하는 코드\r\nimport React, { useState } from 'react';\r\nimport { Grid,NativeSelect,Button } from '@material-ui/core';\r\n\r\nconst Timer = (props) => {//(타이머)+(운동부위 선택)+(운동시작/종료버튼)\r\n    return (\r\n        <Grid className='Timer'>\r\n            <div>{props.time.h < 10 ? `0${props.time.h}` : props.time.h}:{props.time.m < 10 ? `0${props.time.m}` : props.time.m}:{props.time.s < 10 ? `0${props.time.s}` : props.time.s}</div>\r\n            <NativeSelect\r\n                onChange={props.exerciseChange}\r\n                className='ExerciseSelect'>\r\n                    <option aria-label=\"\" value=\"\" >운동부위</option>\r\n                    <option value=\"1\">등</option>\r\n                    <option value=\"2\">가슴</option>\r\n                    <option value=\"3\">어깨</option>\r\n                    <option value=\"4\">복근</option>\r\n                    <option value=\"5\">팔</option>\r\n                    <option value=\"6\">다리</option>\r\n            </NativeSelect>\r\n            <Grid className ='selecterror'>{props.message}</Grid>\r\n            <Grid className ='btnform'>\r\n                {(props.status===0)?\r\n                    <Grid><Button className ='btn' onClick={props.start}>시작</Button></Grid>:\"\"}\r\n                {(props.status===1)?\r\n                    <Grid><Button className ='btn' onClick={props.stop}>정지</Button></Grid>:\"\"}\r\n            </Grid>\r\n        </Grid>\r\n    )\r\n};\r\n\r\nexport default Timer;","//원하는 정보를 왼쪽에 위치 시키기위해 만들어놓은 UI이다.\r\nimport React from 'react';\r\n\r\nimport { Grid } from '@material-ui/core';\r\n\r\nconst ElementLeft = (props) => {\r\n  return(\r\n    <Grid item xs={6} className='element-left'>\r\n      {props.content}\r\n    </Grid>\r\n  )\r\n}\r\n\r\nexport default ElementLeft;","//원하는 정보를 왼쪽에 위치 시키기위해 만들어놓은 UI이다.\r\nimport React from 'react';\r\n\r\nimport { Grid } from '@material-ui/core';\r\n\r\nconst ElementRight = (props) => {\r\n  return(\r\n    <Grid item xs={6} className='element-right'>\r\n      {props.content}\r\n    </Grid>\r\n  )\r\n}\r\n\r\nexport default ElementRight;","//유저의 운동정보를 운동 부위별로 수치를 보여주는 UI이다.\r\nimport React from 'react';\r\n\r\nimport { Paper, Grid, Modal } from '@material-ui/core';\r\n\r\nimport { ElementLeft, ElementRight } from '../ui';\r\n\r\nconst UserInfoModal = (props) => {\r\n  return (\r\n    <Modal\r\n      open={props.open}\r\n      onClose={props.handleClose}\r\n      aria-labelledby='user-exercise-info-title'\r\n      aria-describedby='user-exercise-info'\r\n    >\r\n      <Paper className='modal'>\r\n        <Grid container>\r\n          <ElementLeft \r\n            content='팔 경험치 :'\r\n          />\r\n          <ElementRight \r\n            content={props.data.arm_exp}\r\n          />\r\n          <ElementLeft\r\n            content='가슴 경험치 :'\r\n          />\r\n          <ElementRight\r\n            content={props.data.chest_exp}\r\n          />\r\n          <ElementLeft\r\n            content='등 경험치 :'\r\n          />\r\n          <ElementRight\r\n            content={props.data.back_exp}\r\n          />\r\n          <ElementLeft\r\n            content='어깨 경험치 :'\r\n          />\r\n          <ElementRight\r\n            content={props.data.shoulder_exp}\r\n          />\r\n          <ElementLeft\r\n            content='복근 경험치 :'\r\n          />\r\n          <ElementRight\r\n            content={props.data.belly_exp}\r\n          />\r\n          <ElementLeft\r\n            content='하체 경험치 :'\r\n          />\r\n          <ElementRight\r\n            content={props.data.leg_exp}\r\n          />\r\n        </Grid>\r\n      </Paper>\r\n    </Modal>\r\n  )\r\n}\r\n\r\nexport default UserInfoModal;","//게시판 화면에서 게시판목록을 보여주는 화면\r\n//여기서 BoardListView는 view모델에서 게시판 목록정보를 받아와 목록을 작성하여 보여주는 ui이다.\r\nimport React from 'react';\r\nimport { Grid, Button, Divider } from '@material-ui/core';\r\nimport {BoardListView} from '../ui';\r\nconst BoardList = (props) => {\r\n    return (\r\n        <Grid className='boardlist'>\r\n            <input type='text' \r\n                className='boardmake' \r\n                placeholder={'게시판 이름'} \r\n                onChange={props.onboardnameChange}></input>\r\n            <Button className='makebtn' onClick ={props.makeboard}>게시판 생성</Button>\r\n            <Divider/>\r\n            <BoardListView boardlist={props.boardlist} onClickboard={props.onClickboard}/>\r\n        </Grid>\r\n    )\r\n};\r\n\r\nexport default BoardList;","//게시판 list를 실질적으로 보여주는 ui이다.\r\nimport React from 'react';\r\nimport { Grid} from '@material-ui/core';\r\nconst BoardListView = (props) => {\r\n    const list = props.boardlist.map( // 게시판 리스트를 원하는 ui형태로 변경하여 list에 작성한다.\r\n        (element, index) =>(<Grid key={index}>\r\n                <li key={element.board_id}>\r\n                    <a href = 'board' onClick = {function(ev){\r\n                        ev.preventDefault();\r\n                        props.onClickboard(element.board_id,element.board_name);\r\n                   }}>\r\n                        {element.board_name} \r\n                    </a>\r\n                </li>\r\n            </Grid>\r\n        )\r\n    );\r\n    return (\r\n        <Grid className = 'boardlistform'>\r\n            {list}\r\n        </Grid>\r\n        )\r\n};                \r\nexport default BoardListView;","//특정 게시글목록을 보여주는 ui이다.\r\nimport React from 'react';\r\nimport { Grid, Divider } from '@material-ui/core';\r\nconst PostList = (props) => {\r\n    const list = props.postlist.map( // 게시글 리스트를 원하는 UI형태로 변경하여 list에 작성한다.\r\n        (element, index) =>(<Grid className='postelement' key={index}>\r\n            <li className='postelementlist' key={element.board_id}>\r\n                <a className='postelementa' href = 'board' onClick = {function(ev){\r\n                    ev.preventDefault();\r\n                    props.onpost(element.post_id);\r\n            }}>\r\n                <Grid className='postitems'>\r\n                    <Grid className ='postitemtitle'>{element.post_title}</Grid>\r\n                    <Grid className ='postitemuser'>작성자:{element.user_id}  /  게시일:{element.created_at.substring(0,10)}</Grid>\r\n                </Grid>\r\n                </a>\r\n            </li>\r\n            <Divider/>\r\n        </Grid>\r\n        )\r\n    );\r\n\r\n    return (\r\n        <Grid className = 'boardlistform'>\r\n            {list}\r\n        </Grid>\r\n        )\r\n};                \r\nexport default PostList;","//로그인 화면을 조정하는 코드이다.\r\n//viewmodel에서 데이터를 받아와 원하는 변수에 담아 view에 전송해준다.\r\nimport React, { useState } from 'react';\r\nimport { useHistory } from \"react-router-dom\";\r\nimport LoginView from './LoginView';\r\nimport { HeaderController } from '../ui';\r\n\r\nconst LoginController = ({ viewModel }) => {\r\n    const history = useHistory();\r\n    const [id, setId] = useState(''); //ID\r\n    const [pw, setPw] = useState(''); //비밀번호\r\n\r\n    const onIdChange = (e) => {//ID작성\r\n        setId(e.target.value);\r\n    }\r\n    const onPwChange = (e) => {//비밀번호작성\r\n        setPw(e.target.value);\r\n    }\r\n\r\n    const login = async () => {//로그인\r\n         const connect = await viewModel.login(id, pw);//로그인을 ID,비밀번호와 함께 viewModel로 요청\r\n        const status = connect?.status;\r\n        if (status === 200) {\r\n            history.replace('/');\r\n        } else if (status === 400 || status === 401) {\r\n            setPw('');\r\n            alert('아이디 또는 비밀번호가 잘못되었습니다.')\r\n        } else {\r\n            setPw('');\r\n            alert('내부 서버 오류입니다.');\r\n        }\r\n    }\r\n    return (\r\n        <>\r\n        <HeaderController\r\n            header={'로그인'}\r\n        />\r\n        <LoginView \r\n            onIdChange={onIdChange}\r\n            onPwChange={onPwChange}\r\n            login={login}\r\n        />\r\n        </>\r\n    );\r\n};\r\n\r\nexport default LoginController;","//회원가입 화면을 결정하는 view\r\nimport React from 'react';\r\nimport { Grid, Divider,NativeSelect } from '@material-ui/core';\r\n\r\nconst SignupView = (props) => {\r\n    return (\r\n        <Grid container direction='column'>\r\n            <Grid className='contents'>\r\n                <Grid className='logo'>HELP</Grid>\r\n                <Grid className='join_title'>아이디</Grid>\r\n                <input\r\n                    type='text'\r\n                    className='login' \r\n                    placeholder={'아이디'}\r\n                    onChange={props.onIdChange}\r\n                />\r\n                <Grid className='errorm'>{props.message1}</Grid>\r\n                <Grid className='join_title'>이메일</Grid>\r\n                    <input\r\n                        type=\"email\"\r\n                        className='login'\r\n                        placeholder={'email'}\r\n                        onChange={props.onEmailChange}\r\n                    />\r\n                <Grid className='errorm'>{props.message7}</Grid>\r\n                <Grid className='join_title'>비밀번호</Grid>\r\n                <input\r\n                    type='password'\r\n                    className='login'\r\n                    placeholder={'비밀번호'}\r\n                    onChange={props.onPwChange}\r\n                />\r\n                <Grid className='errorm'>{props.message2}</Grid>\r\n                <Grid className='join_title'>비밀번호 확인</Grid>\r\n                <input\r\n                    type='password'\r\n                    className='login'\r\n                    placeholder={'비밀번호확인'}\r\n                    onChange={props.onPwCheChange}\r\n                />\r\n                <Grid className='errorm'>{props.message3}</Grid>\r\n                <Grid className='join_title'>이름</Grid>\r\n                <input\r\n                    type='text'\r\n                    className='login'\r\n                    placeholder={'이름'}\r\n                    onChange={props.onNameChange}\r\n                />\r\n                <Grid className='errorm'>{props.message4}</Grid>\r\n                <Grid className='join_title'>성별</Grid>\r\n                <NativeSelect\r\n                    onChange={props.genderChange}\r\n                    className='GenderSelect'>\r\n                    <option aria-label=\"\" value=\"\" >성별</option>\r\n                    <option value=\"M\">남자</option>\r\n                    <option value=\"F\">여자</option>\r\n                </NativeSelect>\r\n                <Grid className='errorm'>{props.message5}</Grid>\r\n                <Grid className='join_title'>힌트</Grid>\r\n                    <NativeSelect\r\n                        onChange={props.questChange}\r\n                        className='GenderSelect'>\r\n                        <option aria-label=\"\" value=\"\" >질문</option>\r\n                        <option value=\"1\">당신의 아버지 성함은?</option>\r\n                        <option value=\"2\">당신의 어머니 성함은?</option>\r\n                        <option value=\"3\">당신이 사는 지역은?</option>\r\n                        <option value=\"4\">당신의 모교 이름은?</option>\r\n                    </NativeSelect>\r\n                    <Grid className='errorm'>{props.message6}</Grid>\r\n                    <input\r\n                        type=\"text\"\r\n                        className='login'\r\n                        placeholder={'힌트대답'}\r\n                        onChange={props.onHintChange}\r\n                    />\r\n                    <Grid className='errorm'>{props.message8}</Grid>\r\n                <button type='button' className='loginbtn' onClick={props.Signup}>가입하기</button>\r\n                <Divider />\r\n            </Grid>\r\n        </Grid>\r\n    )    \r\n};\r\n\r\nexport default SignupView;","//회원가입 화면을 조정하는 코드이다.\r\n//viewmodel에서 데이터를 받아와 원하는 변수에 담아 view에 전송해준다.\r\nimport React, { useState } from 'react';\r\nimport { useHistory } from \"react-router-dom\";\r\nimport SignupView from './SignUpView';\r\nimport { HeaderController } from '../ui';\r\n\r\nconst SignupController = ({ viewModel }) => {\r\n    const history = useHistory();\r\n    const [id, setId] = useState('');           //아이디\r\n    const [email, setEmail] = useState('');     //이메일\r\n    const [pw, setPw] = useState('');           //비밀번호\r\n    const [cpw, setCpw] = useState('');         //비밀번호확인\r\n    const [name, setName] = useState('');       //이름\r\n    const [gender, setGender] = useState('');   //성별\r\n    const [quest, setQuest] = useState('');     //질문\r\n    const [hint, setHint] = useState('');       //대답\r\n\r\n    //오류메시지\r\n    const [message1,setMessage1] = useState('');\r\n    const [message2,setMessage2] = useState('');\r\n    const [message3,setMessage3] = useState('');\r\n    const [message4,setMessage4] = useState('');\r\n    const [message5,setMessage5] = useState('');\r\n    const [message6,setMessage6] = useState('');\r\n    const [message7,setMessage7] = useState('');\r\n    const [message8,setMessage8] = useState('');\r\n\r\n    \r\n    const checkAlphaNum = (str) => {//아이디 형태확인(알파벳 소문자, 대문자, 숫자만)\r\n        const regexp = /^[a-zA-Z0-9]*$/;\r\n        if(regexp.test(str)){\r\n            return true;\r\n        } else {\r\n            return false;\r\n        }\r\n    }\r\n    function CheckEmail(str){//이메일 형태 확인\r\n         var reg_email = /^([0-9a-zA-Z_\\.-]+)@([0-9a-zA-Z_-]+)(\\.[0-9a-zA-Z_-]+){1,2}$/;\r\n        if(!reg_email.test(str)){\r\n            return false;\r\n        }\r\n        else{\r\n            return true;\r\n        }\r\n    } \r\n    const onIdChange = (e) => {//아이디 작성\r\n        if(e.target.value==='')\r\n            setMessage1('아이디를 입력해주세요.');\r\n        else if (!checkAlphaNum(e.target.value)) {\r\n            setId(e.target.value);\r\n            setMessage1('아이디는 알파벳 소문자, 대문자, 숫자만 가능합니다.');\r\n        } else {\r\n            setId(e.target.value);\r\n            setMessage1('');\r\n        }\r\n    };\r\n    const onEmailChange = (e) => {//email 작성\r\n        if(e.target.value==='')\r\n            setMessage7('e-mail을 입력해주세요.');\r\n        else{\r\n            if(CheckEmail(e.target.value)){\r\n                setMessage7('');\r\n                setEmail(e.target.value);}\r\n            else{\r\n                setMessage7('e-mail형식에 맞게 적어주세요.');\r\n            }\r\n        }    \r\n    }\r\n    const onPwChange = (e) => {//비밀번호 작성\r\n        if(e.target.value==='')\r\n            setMessage2('비밀번호를 입력해주세요.');\r\n        else{\r\n            setMessage2('');\r\n            setPw(e.target.value);}\r\n    }\r\n    const onPwCheChange = (e) => {//비밀번호 확인 작성\r\n        if(e.target.value==='')\r\n            setMessage3('비밀번호를 입력해주세요.');\r\n        else if(e.target.value!==pw)\r\n            setMessage3('비밀번호가 일치하지 않습니다.');\r\n        else{\r\n            setMessage3('');\r\n            setCpw(e.target.value);\r\n        }\r\n    }\r\n    const onNameChange = (e) => {//이름 작성\r\n        if(e.target.value==='')\r\n            setMessage4('이름을 입력해주세요.');\r\n        else{\r\n            setMessage4('');\r\n            setName(e.target.value);}\r\n    }\r\n    const genderChange = (e) => {//성별 선택\r\n        if(e.target.value==='')\r\n            setMessage5('성별을 선택해주세요.');\r\n        else{\r\n            setMessage5('');\r\n            setGender(e.target.value);}\r\n    }\r\n    const questChange = (e) => {//질문 선택\r\n        if(e.target.value==='')\r\n            setMessage6('질문을 선택해주세요.');\r\n        else{\r\n            setMessage6('');\r\n            setMessage8('');\r\n            setQuest(e.target.value);}\r\n    }\r\n    const onHintChange = (e) => {//대답 작성\r\n        if(message6 !==''){\r\n            setMessage8('질문을 먼저 선택해주세요.');\r\n        }else if(e.target.value===''&& message6 ===''){\r\n            setMessage8('질문의 대답을 적어주세요.');\r\n        }\r\n        else{\r\n            setMessage8('');\r\n            setHint(e.target.value);}\r\n    }\r\n\r\n    const Signup = async () => {//회원가입\r\n        if(id === ''|| email === ''|| pw === ''|| name === ''|| gender === ''|| quest === ''|| hint === ''){\r\n            alert('모든 정보를 입력해주세요.');\r\n        } else if (cpw === '') {\r\n            alert('비밀번호가 일치하지 않습니다.');\r\n        } else if (!checkAlphaNum(id)) {\r\n            alert('아이디는 알파벳 소문자, 대문자, 숫자만 가능합니다.');\r\n            return;\r\n        } else {\r\n            const connect = await viewModel.signUp(id, pw, name, gender, email, quest, hint);//viewModel에 필요정보와 함께 회원가입 요청\r\n            const status = connect?.status;\r\n\r\n            if (status === 201) {\r\n                alert('가입되었습니다.');\r\n                history.replace('/login');\r\n            } else if (status === 400) {\r\n                alert('중복된 아이디입니다.');\r\n            } else {\r\n                alert('내부 서버 오류입니다.');\r\n            }\r\n        }\r\n\r\n    }\r\n    \r\n    return (\r\n        <>\r\n            <HeaderController header='회원가입' />\r\n            <SignupView \r\n                onIdChange={onIdChange}\r\n                onEmailChange={onEmailChange}\r\n                onPwChange={onPwChange}\r\n                onPwCheChange={onPwCheChange}\r\n                onNameChange={onNameChange}\r\n                genderChange={genderChange}\r\n                questChange={questChange}\r\n                onHintChange={onHintChange}\r\n                message1={message1}\r\n                message2={message2}\r\n                message3={message3}\r\n                message4={message4}\r\n                message5={message5}\r\n                message6={message6}\r\n                message7={message7}\r\n                message8={message8}\r\n                Signup={Signup}\r\n            />\r\n        </>\r\n    );\r\n};\r\n\r\nexport default SignupController;","//홈 화면을 결정하는 view\r\nimport React from 'react';\r\nimport { Grid } from '@material-ui/core';\r\nimport { Timer, Char} from '../ui';\r\n\r\nconst HomeView = (props) => {\r\n    return (\r\n        <Grid container direction='column'>\r\n            <Grid className='contents'>\r\n                <Grid className ='IdView'>\r\n                    <Char/>\r\n                    <Timer\r\n                        time={props.time}\r\n                        message={props.message}\r\n                        status={props.status}\r\n                        start={props.start}\r\n                        run={props.run}\r\n                        stop={props.stop}\r\n                        exerciseChange={props.exerciseChange}/>\r\n                </Grid>\r\n            </Grid>\r\n        </Grid>\r\n    )    \r\n};\r\n\r\nexport default HomeView;","//홈 화면을 조정하는 코드이다.\r\n//viewmodel에서 데이터를 받아와 원하는 변수에 담아 view에 전송해준다.\r\nimport React, { useState,useEffect } from 'react';\r\n\r\nimport { HeaderController  } from '../ui';\r\nimport HomeView from './HomeView';\r\nimport { unityContext } from '../../test';\r\nimport useStore from '../useStore';\r\nimport { useHistory } from 'react-router-dom';\r\n\r\n\r\nconst HomeController = ({ viewModel }) => {\r\n    const { Auth } = useStore();\r\n    const history = useHistory();\r\n    const [time, setTime] = useState({h:0,m:0,s:0});    //타이머시간(h:m:s)\r\n    const [interv, setInterv] = useState();             //타이머 실행을 판별\r\n    const [status, setStatus] = useState(0);            //운동상태인지 아닌지 판별(0=운동중X,1=운동중O)\r\n    const [message, setmessage] = useState('');         //오류메시지\r\n    const [expart, setExpart] = useState('');           //운동부위\r\n\r\n\r\n    let today = new Date();\r\n    const start = () => {//타이머 시작\r\n        if(Auth.isLogged){\r\n            if(expart===''){\r\n                setmessage('운동부위를 선택해주세요.');\r\n            }\r\n            else{\r\n                if(message ===''){\r\n                    run();\r\n                    setStatus(1);\r\n                    const now = today.getHours() * 3600 + today.getMinutes() * 60 + today.getSeconds();\r\n                    setInterv(setInterval(run,1000));//1초에 1번실행\r\n                    viewModel.exercise(expart, now, 1); //운동부위 + 현재 시간+ 운동중 을 viewModel에 전달한다.\r\n                }\r\n            }\r\n        }\r\n        else {\r\n            alert('로그인을 해야 사용가능한 기능입니다.');\r\n            history.replace('/login');\r\n        }\r\n    };\r\n    var updatedH = time.h, updatedM = time.m, updatedS = time.s;\r\n    const run=()=>{//타이머시간이 흐르는 함수\r\n        if(updatedM===59){\r\n            updatedH++;\r\n            updatedM=0;\r\n            \r\n        }\r\n        if(updatedS===59){\r\n            updatedM++;\r\n            updatedS=-1;\r\n        }\r\n        updatedS++;\r\n        return setTime({h:updatedH,m:updatedM,s:updatedS});\r\n    };\r\n    const stop=()=>{//타이머 정지\r\n        if(message===''){\r\n            clearInterval(interv);//1초에한번 실행하는 것을 정지\r\n            const times = time.h * 3600 + time.m * 60 + time.s;\r\n            levelChange(times);\r\n            setTime({h:0,m:0,s:0});\r\n            setStatus(0);\r\n            viewModel.exercise(expart, times, 2); //운동부위 + 현재 시간+ 운동종료를 viewModel에 전달한다.\r\n        }\r\n    }\r\n\r\n    const levelChange = (times) => { //유니티에 유저의 운동량에 따라 부위별 수치 전송\r\n        let Headandchest_level = (expart===\"2\")?levelcheck1(Auth.data.chest_exp+times):levelcheck1(Auth.data.chest_exp);    //머리+가슴level\r\n        let Back_level = (expart===\"1\")? levelcheck2(Auth.data.back_exp + times):levelcheck2(Auth.data.back_exp);           //등level\r\n        let Arm_level = (expart===\"5\")?levelcheck1(Auth.data.arm_exp + times):levelcheck1(Auth.data.arm_exp);               //팔level\r\n        let Lowerbody_level = (expart===\"6\")?levelcheck2(Auth.data.leg_exp + times):levelcheck2(Auth.data.leg_exp);         //하체level\r\n        let Abs_level = (expart===\"4\")?levelcheck1(Auth.data.belly_exp + times):levelcheck1(Auth.data.belly_exp);           //복근level\r\n        let Shoulder_level = (expart===\"3\")?levelcheck1(Auth.data.shoulder_exp + times):levelcheck1(Auth.data.shoulder_exp);//어깨level\r\n        let Gender = (Auth.data.gender==='M')?0:1;                                                                          //성별\r\n        //가슴 배 어깨 팔 ->6 //하체 등 ->4\r\n\r\n        //유니티에 각각의 부위level을 전송\r\n        unityContext.send('BigMan', 'Headandchest_LevelChange', Headandchest_level);\r\n        unityContext.send('BigMan', 'Back_LevelChange', Back_level);\r\n        unityContext.send('BigMan', 'Arm_LevelChange', Arm_level);\r\n        unityContext.send('BigMan', 'Lowerbody_LevelChange', Lowerbody_level);\r\n        unityContext.send('BigMan', 'Abs_LevelChange', Abs_level);\r\n        unityContext.send('BigMan', 'Shoulder_LevelChange', Shoulder_level);\r\n        unityContext.send('BigMan', 'GenderChange', Gender);\r\n    }\r\n\r\n    //level이 6단계인 부위 level체크\r\n    const levelcheck1 = (parttime) =>{//전부 초단위 exp단위도 sec\r\n        if(parttime<4500){\r\n            return 1;\r\n        }else if(4500<=parttime&&parttime<45000){\r\n            return 2;\r\n        }else if(45000<=parttime&&parttime<125000){\r\n            return 3;\r\n        }else if(125000<=parttime&&parttime<275000){\r\n            return 4;\r\n        }else if(275000<=parttime&&parttime<815000){\r\n            return 5;\r\n        }else if(815000<=parttime){\r\n            return 6;\r\n        }\r\n\r\n    }\r\n    //level이 4단계인 부위 level체크\r\n    const levelcheck2 = (parttime) =>{//전부 초단위 exp단위도 sec\r\n        if(parttime<4500){\r\n            return 1;\r\n        }else if(4500<=parttime&&parttime<275000){\r\n            return 2;\r\n        }else if(275000<=parttime&&parttime<815000){\r\n            return 3;\r\n        }else if(815000<=parttime){\r\n            return 4;\r\n        }\r\n\r\n    }\r\n\r\n    const exerciseChange = (e) =>{//운동부위 설정\r\n        if(status===0){//운동중이 아닐경우 운동부위를 선택하게한다.\r\n            if(e.target.value==='')\r\n                setmessage('운동부위를 선택해주세요.');\r\n            else{\r\n                setmessage('');\r\n                setExpart(e.target.value);\r\n            }\r\n        }\r\n        else{//운동중일경우 부위변경을 못하게 한다.\r\n            if(expart===e.target.value){\r\n                setmessage('');\r\n            }\r\n            else{\r\n                setmessage('운동중 운동부위 변경은 불가 합니다.');\r\n            }\r\n        }\r\n    }\r\n    return (\r\n        <>\r\n        <HeaderController header='캐릭터' />\r\n        <HomeView\r\n            time={time}\r\n            message={message}\r\n            status={status}\r\n            start={start}\r\n            run={run}\r\n            stop={stop}\r\n            exerciseChange={exerciseChange}\r\n        />\r\n        </>\r\n    );\r\n};\r\n\r\nexport default HomeController;","//스터디 화면을 결정하는 view\r\nimport React from 'react';\r\nimport { Grid , Button} from '@material-ui/core';\r\nimport { IoPodiumOutline,IoCalendarOutline } from \"react-icons/io5\";\r\nimport { BsPersonPlus } from \"react-icons/bs\";\r\n\r\nimport { GroupMember } from '../ui';\r\nimport { useHistory } from 'react-router-dom';\r\n\r\nconst GroupView = (props) => {\r\n    const history = useHistory();\r\n    return (\r\n        <Grid container direction='column'>\r\n            <Grid className='group'>\r\n                <Grid className='grouplogo'><Grid className='groupname'>{props.groupname}</Grid></Grid>\r\n                \r\n                <Grid className = 'groupmembernumber'>멤버<Grid className = 'groupmember'>{props.groupmember}</Grid>명</Grid>\r\n                <Grid className = 'groupkategorie'>\r\n                    {(props.ismember===false)?\r\n                    <Grid className='groupicon'><Button className='groupiconbtn' onClick={props.join}><BsPersonPlus/><Grid>가입</Grid></Button></Grid>:\r\n                    <Grid className='groupicon'><Button className='groupiconbtn' onClick={props.disjoin}><BsPersonPlus/><Grid>탈퇴</Grid></Button></Grid>}\r\n                </Grid>\r\n                <Grid className ='doing'>\r\n                    <Grid>지금운동중인 멤버 수<Grid className = 'groupmember'>{props.Exercisemember}</Grid></Grid>\r\n                    <GroupMember groupmembers={props.groupmembers}></GroupMember>\r\n                </Grid>\r\n            </Grid>\r\n\r\n            \r\n            \r\n        </Grid>\r\n    )    \r\n};\r\n\r\nexport default GroupView;","//특정 스터디 화면을 조정하는 코드이다.\r\n//viewmodel에서 데이터를 받아와 원하는 변수에 담아 view에 전송해준다.\r\nimport React, { useState,useEffect, useRef } from 'react';\r\nimport { GiRun } from 'react-icons/gi';\r\n\r\nimport GroupView from './GroupView';\r\nimport { HeaderController } from '../ui';\r\nimport useStore from '../useStore';\r\nimport { useHistory } from 'react-router-dom';\r\n\r\nconst GroupController = ({ viewModel }) => {\r\n    const mounted = useRef(false);\r\n    const { Auth } = useStore();\r\n    const history = useHistory();\r\n\r\n    const [memberlist,setMemberlist] = useState([]);            //스터디에 속한 유저들 정보\r\n    const [studydetail,setStudydetail] = useState([]);          //스터디의 상세 정보(스터디이름,스터디수용인원,...)\r\n    const [groupname,setgroupname] = useState('');              //스터디의 이름\r\n    const [groupmember,setgroupmember] = useState('');          //스터디의 속한 유저수\r\n    const [Exercisemember,setExercisemember] = useState('');    //스터디에서 현제 운동중인 유저수\r\n    const id = Auth.isLogged ? Auth.data.user_id:'';            //로그인 되어있으면 현재 사용자id, 안되어있으면 공백\r\n    const [ismember,setIsmember] = useState(false);             //true= 스터디에 소속된 사람, false= 소속이 아닌 사람\r\n    const address = (history.location.pathname);                //스터디주소(스터디ID를 추출)\r\n    const study_id = address.replace(/[^0-9]/g,'');             //스터디ID\r\n\r\n    const getmember = async () => {//스터디내의 유저들 정보를 받아오는 함수\r\n        const test = await viewModel.member(study_id);//study_id스터디에 속한 유저들 정보를 viewModel에 요청\r\n        const status = test?.status;\r\n        setMemberlist(test.data);\r\n        if(test.data.find(element => element.user_id === id)===undefined){\r\n            setIsmember(false);\r\n        }else{\r\n            setIsmember(true);\r\n        }\r\n        const exercise = test.data.filter(element => true === element.exercise_state).length;\r\n        setExercisemember(exercise);\r\n        if (status === 200) {\r\n            \r\n        }\r\n        else {\r\n            alert('내부 서버 오류입니다.');\r\n        }\r\n    }\r\n\r\n    const getstudy_detail = async () => {//스터디의 상세정보를 받아오는 함수\r\n        const test = await viewModel.study_detail(study_id);//study_id스터디의 상세 정보를 viewModel에 요청\r\n        const status = test?.status;\r\n        setStudydetail(test.data);\r\n        setgroupname(test.data.study_name);\r\n        setgroupmember(test.data.current_user_count);\r\n        if (status === 200) {\r\n        }\r\n        else {\r\n            alert('내부 서버 오류입니다.');\r\n        }\r\n    }\r\n\r\n    //페이지가 렌더링 되고 다른 입력없이 실행되는 함수(스터디 상서정보+스터디내의 유저들 정보)\r\n    useEffect(() => {\r\n        getstudy_detail();\r\n        getmember();\r\n    },[]);\r\n      \r\n    //스터디 가입\r\n    const join=()=>{                                                                \r\n        if(Auth.isLogged === false){ history.replace('/login');}                //비로그인시 로그인페이지로이동\r\n        else{\r\n            if(ismember===false){                                               //이미 속한 유저인지 아닌지 확인\r\n                {\r\n                    if(studydetail.current_user_count===studydetail.capacity){  //수용인원이 초과될경우\r\n                        alert('더 이상 해당그룹에 가입할 수 없습니다.');\r\n                    }else{\r\n                        try {\r\n                            viewModel.join(id,study_id);                        //id유저가 study_id스터디에 가입을 viewModel에 요청\r\n                            alert('가입되었습니다.');\r\n                            setIsmember(true);\r\n                            getstudy_detail();\r\n                            getmember();\r\n                        } catch (e) {\r\n\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n            else{\r\n                alert('이미 가입된 곳 입니다.');\r\n            }\r\n        }  \r\n    }\r\n\r\n    //스터디 탈퇴\r\n    const disjoin=()=>{\r\n        if(Auth.isLogged === false){ history.replace('/login');}//비로그인시 로그인페이지로이동\r\n        else{\r\n            if(ismember===true){                                //이미 속한 유저인지 아닌지 확인    \r\n                if(studydetail.current_user_count===1){         //마지막 인원이 탈퇴했을 경우\r\n                    viewModel.disjoin(id,study_id);\r\n                    alert('탈퇴되었습니다.');\r\n                    history.replace('/grouplist');\r\n                }else{\r\n                    try {\r\n                        viewModel.disjoin(id,study_id);         //id유저가 study_id스터디에 탈퇴를 viewModel에 요청\r\n                        alert('탈퇴되었습니다.');\r\n                        setIsmember(false);\r\n                        getstudy_detail();\r\n                        getmember();\r\n                    } catch (e) {\r\n                        \r\n                    }\r\n                }\r\n            }\r\n            else{\r\n                alert('해당 스터디의 맴버가 아닙니다.');\r\n            }\r\n        }\r\n    }\r\n        \r\n       \r\n    return (\r\n        <>\r\n        <HeaderController header={'그룹'}/>\r\n        < GroupView \r\n            groupname={groupname}\r\n            groupmember={groupmember}\r\n            Exercisemember={Exercisemember}\r\n            groupmembers = {memberlist}\r\n            ismember = {ismember}\r\n            join = {join}\r\n            disjoin = {disjoin}\r\n        />\r\n        </>\r\n    );\r\n};\r\n\r\nexport default GroupController;","//스터디목록 화면을 결정하는 view\r\nimport React from 'react';\r\nimport { Grid ,Link} from '@material-ui/core';\r\n\r\nimport { IoSearch } from \"react-icons/io5\";\r\n\r\nimport Fab from '@material-ui/core/Fab';\r\nimport AddIcon from '@material-ui/icons/Add';\r\n\r\nimport { GroupForm  } from '../ui';\r\n\r\nconst GrouplistView = (props) => {\r\n    return (\r\n        <Grid container direction='column'>\r\n            <Grid className ='grouplist'>\r\n                    <GroupForm groupdata = {props.groupdata}/>\r\n                <Fab className = 'makegroupbtn' aria-label=\"add\" onClick = {props.make}>\r\n                    <AddIcon />\r\n                </Fab>\r\n            </Grid>\r\n        </Grid>\r\n    )    \r\n};\r\n\r\nexport default GrouplistView;","//스터디목록 화면을 조정하는 코드이다.\r\n//viewmodel에서 데이터를 받아와 원하는 변수에 담아 view에 전송해준다.\r\nimport React, { useState,useEffect } from 'react';\r\n\r\nimport { HeaderController } from '../ui';\r\nimport GrouplistView from './GroupListView';\r\nimport { useHistory } from 'react-router-dom';\r\nimport useStore from '../useStore';\r\n\r\n\r\nconst GrouplistController = ({ viewModel }) => {\r\n    const { Auth } = useStore();\r\n    const history = useHistory();\r\n\r\n    const [list,setList] = useState([]); //스터디 목록\r\n\r\n\r\n    const getlist = async () => {//스터디 목록을 가져오는 함수\r\n        const test = await viewModel.list(); //스터디 목록을 viewModel에 요청\r\n        const status = test?.status;\r\n        setList(test.data);\r\n        if (status === 200) {\r\n        }\r\n        else {\r\n            alert('내부 서버 오류입니다.');\r\n        }\r\n    }\r\n\r\n    //페이지가 렌더링 되고 다른 입력없이 실행되는 함수(스터디 목록을 가져온다.)\r\n    useEffect(() => {\r\n        getlist();\r\n      },[]);\r\n\r\n\r\n    const make = () =>{                                     //스터디 생성버튼\r\n        if(Auth.isLogged){                                  //로그인시 스터디 생성페이지로 이동\r\n            history.replace('groupmake');}                  \r\n        else{                                               //비로그인시 로그인 페이지로 이동\r\n            alert('그룹을 생성하려면 로그인이 필요합니다.');\r\n            history.replace('login');\r\n        }\r\n            \r\n    }\r\n    return (\r\n        <>\r\n            <HeaderController header='그룹 목록' />\r\n            <GrouplistView \r\n                make={make}\r\n                groupdata = {list}\r\n            />\r\n        </>\r\n    );\r\n};\r\n\r\nexport default GrouplistController;","//유저정보 화면을 결정하는 view\r\nimport React from 'react';\r\nimport { Grid, Button } from '@material-ui/core';\r\nimport { withStyles } from '@material-ui/core/styles'\r\n\r\nimport { ElementLeft, ElementRight, UserInfoModal } from '../ui';\r\n\r\nconst ColorButton = withStyles({\r\n    root: {\r\n        backgroundColor: '#8AD3FC',\r\n        margin: '20px 0',\r\n        '&:hover': {\r\n            backgroundColor: '#30B0FD'\r\n        }\r\n    }\r\n})(Button);\r\nconst UserInfoView = (props) => {\r\n    return(\r\n        <Grid container direction='column'>\r\n            <Grid className='contents'>\r\n                <Grid className='logo'>HELP</Grid>\r\n                    <Grid container>\r\n                        <ElementLeft\r\n                            content='아이디 :'\r\n                        />\r\n                        <ElementRight\r\n                            content={props.data.user_id}\r\n                        />\r\n                        <ElementLeft\r\n                            content='이름 :'\r\n                        />\r\n                        <ElementRight\r\n                            content={props.data.user_name}\r\n                        />\r\n                        <Grid item xs={12}>\r\n                            <ColorButton\r\n                                variant='contained'\r\n                                className='element-center'\r\n                                onClick={props.handleOpen}\r\n                                color='primary'\r\n                            >\r\n                                내 운동 정보\r\n                            </ColorButton>\r\n                        </Grid>\r\n                        <UserInfoModal\r\n                            open={props.open}\r\n                            handleClose={props.handleClose}\r\n                            data={props.data}\r\n                        />\r\n                        {(props.state===1)?\r\n                        <Grid item xs={12}>\r\n                            <ColorButton\r\n                                variant='contained'\r\n                                className='element-center'\r\n                                onClick={props.pwChange}\r\n                                color='primary'\r\n                            >\r\n                                비밀번호 변경\r\n                            </ColorButton>\r\n                        </Grid>:''}\r\n                        {(props.state===2)?\r\n                            <><ElementLeft\r\n                                content='변경비밀번호 :'\r\n                            />\r\n                            <ElementRight\r\n                                content={\r\n                                    <input\r\n                                        type='password'\r\n                                        className='element-input'\r\n                                        onChange={props.onPwChange}\r\n                                    />\r\n                                }\r\n                            />\r\n                            <ElementLeft\r\n                                content='비밀번호 확인 :'\r\n                            />\r\n                            <ElementRight\r\n                                content={\r\n                                    <>\r\n                                    <input\r\n                                        type='password'\r\n                                        className='element-input'\r\n                                        onChange={props.onCpwChange}\r\n                                    />\r\n                                    <Grid className='errorm'>{props.message}</Grid>\r\n                                    </>\r\n                                }\r\n                            />\r\n                            <Grid item xs={12}>\r\n                                <ColorButton\r\n                                    variant='contained'\r\n                                    className='element-center'\r\n                                    onClick={props.pwChange}\r\n                                    color='primary'\r\n                                >\r\n                                    비밀번호 변경\r\n                                </ColorButton>\r\n                            </Grid></>:''}\r\n                    </Grid>\r\n            </Grid>\r\n        </Grid>\r\n    )\r\n}\r\n\r\nexport default UserInfoView;","//유저정보 화면을 조정하는 코드이다.\r\n//viewmodel에서 데이터를 받아와 원하는 변수에 담아 view에 전송해준다.\r\nimport React, { useState } from 'react';\r\nimport { useHistory } from \"react-router-dom\";\r\nimport UserInfoView from './UserInfoView';\r\n\r\nimport { HeaderController } from '../ui';\r\nimport useStore from '../useStore';\r\n\r\nconst { Auth } = useStore();\r\n\r\nconst UserInfoController = ({ viewModel }) => {\r\n    const [data] = useState(Auth.data);                     //로그인한 유저의 정보\r\n    const [open, setOpen] = useState(false);                //true=유저정보화면열기,false=유저정보화면닫기\r\n    const [pw, setPw] = useState('');                       //변경 비밀번호\r\n    const [cpw, setCpw] = useState('');                     //변경 비밀번호 확인\r\n    const [message,setMessage] = useState('');              //오류메시지\r\n    const [state,setState] = useState(1);                   //1=비밀번호변경X,2=비밀번호변경O\r\n    const user_id = Auth.isLogged ? Auth.data.user_id:''    //로그인 되어있으면 현재 사용자id, 안되어있으면 공백\r\n\r\n    const onPwChange = (e) => {//변경 비밀번호 작성\r\n        if (cpw===''){\r\n            setMessage('');\r\n            setPw(e.target.value);\r\n        }else{\r\n            if(e.target.value===cpw){\r\n                setMessage('');\r\n                setPw(e.target.value);\r\n            }else{\r\n                setMessage('비밀번호가 일치하지 않습니다.');\r\n                setPw(e.target.value);\r\n            }\r\n        }\r\n    }\r\n    const onCpwChange = (e) => {//변경 비밀번호 확인 작성\r\n        if (e.target.value !== pw) {\r\n            setMessage('비밀번호가 일치하지 않습니다.');\r\n            setCpw(e.target.value);\r\n        } else {\r\n            setMessage('');\r\n            setCpw(e.target.value);\r\n        }\r\n    }\r\n    const handleOpen = () => {//유저운동정보를 화면보기\r\n        setOpen(true);\r\n    }\r\n    const handleClose = () => {//유저운동정보를 화면닫기\r\n        setOpen(false);\r\n    }\r\n    const pwChange = async () => { //비밀번호 변경 함수\r\n        if(state===1){\r\n            setPw('');\r\n            setCpw('');\r\n            setMessage('');\r\n            setState(2);\r\n        }else if(state===2){\r\n            if(pw===cpw&&pw!==''){\r\n                await viewModel.changepw(user_id,pw);//viewModel에 비밀번호 변경 요청\r\n                alert('비밀번호가 변경되었습니다.');\r\n            }\r\n            setState(1);\r\n        }\r\n    }\r\n    return (\r\n        <>\r\n        <HeaderController\r\n            header={'회원정보'}\r\n        />\r\n        <UserInfoView\r\n            data={data}\r\n            open={open}\r\n            handleOpen={handleOpen}\r\n            handleClose={handleClose}\r\n            onPwChange={onPwChange}\r\n            onCpwChange={onCpwChange}\r\n            pwChange={pwChange}\r\n            message={message}\r\n            state={state}\r\n        />\r\n        </>\r\n    );\r\n};\r\n\r\nexport default UserInfoController;","//스터디생성 화면을 결정하는 view\r\nimport React from 'react';\r\nimport { Grid, Divider,NativeSelect } from '@material-ui/core';\r\n\r\nconst GroupMakeView = (props) => {\r\n    return (\r\n        <Grid container direction='column'>\r\n            <Grid className='contents'>\r\n                <Grid className='logo'>HELP</Grid>\r\n                <Grid className='join_title'>스터디명</Grid>\r\n                <input\r\n                    type='text'\r\n                    className='login' \r\n                    placeholder={'스터디명'}\r\n                    onChange={props.onStudyChange}\r\n                />\r\n                <Grid className='errorm'>{props.message1}</Grid>\r\n                <Grid className='join_title'>최대인원수</Grid>\r\n                <NativeSelect\r\n                    onChange={props.CapacityChange}\r\n                    className='GenderSelect'>\r\n                    <option aria-label=\"\" value=\"\" ></option>\r\n                    <option value=\"1\">1</option>\r\n                    <option value=\"2\">2</option>\r\n\t\t\t\t\t<option value=\"3\">3</option>\r\n\t\t\t\t\t<option value=\"4\">4</option>\r\n\t\t\t\t\t<option value=\"5\">5</option>\r\n\t\t\t\t\t<option value=\"10\">10</option>\r\n\t\t\t\t\t<option value=\"15\">15</option>\r\n\t\t\t\t\t<option value=\"20\">20</option>\r\n                </NativeSelect>\r\n                <Grid className='errorm'>{props.message2}</Grid>\r\n                <button type='button' className='loginbtn' onClick={props.MakeStudy}>스터디생성</button>\r\n                <Divider />\r\n            </Grid>\r\n        </Grid>\r\n    )    \r\n};\r\n\r\nexport default GroupMakeView;\r\n","//스터디생성 화면을 조정하는 코드이다.\r\n//viewmodel에서 데이터를 받아와 원하는 변수에 담아 view에 전송해준다.\r\nimport React, { useState } from 'react';\r\nimport { useHistory } from \"react-router-dom\";\r\nimport GroupMakeView from './GroupMakeView';\r\nimport { HeaderController } from '../ui';\r\nimport useStore from '../useStore';\r\n\r\nconst GroupMakeController = ({ viewModel }) => {\r\n    const { Auth } = useStore();\r\n    const history = useHistory();         \r\n\tconst user = Auth.data.user_id;                 //로그인 되어있으면 현재 사용자id, 안되어있으면 공백\r\n    const [study, setStudy] = useState('');         //만들 스터디 이름\r\n    const [capacity, setCapacity] = useState('');   //만들 스터디 수용인원\r\n    const [message1,setMessage1] = useState('');    //오류메시지1\r\n    const [message2,setMessage2] = useState('');    //오류메시지2\r\n\t\r\n    const onStudyChange = (e) => {//만들 스터디 이름\r\n        if(e.target.value==='')\r\n            setMessage1('스터디명을 입력해주세요.');\r\n        else{\r\n            setStudy(e.target.value);\r\n            setMessage1('');\r\n        }\r\n    };\r\n    const CapacityChange = (e) =>{//만들 스터디 수용인원\r\n        if(e.target.value==='')\r\n            setMessage2('최대인원수를 선택해주세요.');\r\n        else{\r\n            setMessage2('');\r\n            setCapacity(e.target.value);}\r\n    }\r\n    const MakeStudy = async () => {//스터디 생성\r\n        if(study==''|| capacity==''){//모든 정보를 입력했는지 확인\r\n            alert('모든 정보를 입력해주세요.');\r\n        }else{\r\n            try {\r\n                await viewModel.makeStudy(user,study,capacity);//스터디 생성을 viewModel로 필요정보와 함께 요청\r\n                alert('스터디가 생성되었습니다.');\r\n                history.replace('/grouplist');\r\n            } catch (e) {\r\n            }\r\n        }\r\n\r\n    }\r\n    \r\n    return (\r\n        <>\r\n            <HeaderController header='그룹생성' />\r\n            <GroupMakeView \r\n                onStudyChange={onStudyChange}\r\n                CapacityChange={CapacityChange}\r\n                message1={message1}\r\n                message2={message2}\r\n                MakeStudy={MakeStudy}\r\n            />\r\n        </>\r\n    );\r\n};\r\n\r\nexport default GroupMakeController;","//게시판 화면을 결정하는 view\r\nimport React from 'react';\r\nimport { Grid,Button,Divider } from '@material-ui/core';\r\nimport { BoardList,PostList} from '../ui';\r\n\r\nconst BoardView = (props) => {\r\n    //props.state에 따라 화면이 변화한다.(1=게시글목록을 보여주는 화면,2=게시글 작성화면,3=게시글화면,4=게시글 수정화면)\r\n    return (\r\n        <Grid className='boardmainview'>\r\n            <Grid className='boardview'>\r\n                <BoardList boardlist={props.boardlist} \r\n                            onboardnameChange={props.onboardnameChange}\r\n                            makeboard ={props.makeboard}\r\n                            onClickboard = {props.onClickboard}\r\n                            boardlist={props.boardlist}/>\r\n                {(props.board!=='')?\r\n                <Grid className='element'><Grid className='nameboard'>{props.boardtitle}</Grid>\r\n                {(props.state===1)?<Grid className='board'>{/*1=게시글목록을 보여주는 화면*/}\r\n                    <Grid className='boardbtn'>\r\n                        {!props.changestate?\r\n                        <Grid className='boardbtns'><Button className='makebtn' onClick ={props.makepost}>글쓰기</Button>\r\n                        <Button className='makebtn' onClick ={props.deleteboard}>삭제</Button>\r\n                        <Button className='makebtn' onClick ={props.change}>수정</Button></Grid>:\r\n                        <Grid className='boardupdate'><input \r\n                        type='text'\r\n                        className ='boardname'\r\n                        onChange={props.onRename}\r\n                        />\r\n                        <Button className='makebtn' onClick ={props.boardupdate}>수정</Button></Grid> }\r\n                    </Grid>\r\n                    <Divider/>\r\n\r\n                    <PostList onpost={props.onpost} postlist = {props.postlist}/>\r\n                </Grid>:''}\r\n                {(props.state===2)?<Grid className='board'>{/*2=게시글 작성화면*/}\r\n                    <Grid className='post'>\r\n                        <textarea\r\n                            type='text'\r\n                            className='title' \r\n                            placeholder={'제목'}\r\n                            onChange={props.ontitleChange}\r\n                        />\r\n                        <textarea\r\n                            type='text'\r\n                            className='content'\r\n                            placeholder={'내용을 입력하세요.'}\r\n                            onChange={props.oncontentChange}\r\n                        />\r\n                        <Grid className='btncol'>\r\n                            <Button className='makebtn' onClick = {props.post}>게시글 올리기</Button>\r\n                            <Button className='makebtn' onClick = {props.back}>돌아가기</Button>\r\n                        </Grid>\r\n                    </Grid>\r\n                </Grid>:''}\r\n                {(props.state===3)?<Grid className='board'> {/*3=게시글화면*/}  \r\n                    <Grid className = 'postview'>\r\n                        <Grid className='postviewtitle'>\r\n                            <Grid className='postviewtitlefirst'>\r\n                                <Grid className='title'><p>제 목:</p></Grid>\r\n                                <Grid className='titlename'>{props.posttitle}</Grid>\r\n                            </Grid>\r\n                            <Grid className='postviewtitlesecon'>\r\n                                <Grid className='user'>작성자:</Grid>\r\n                                <Grid className='username'>{props.postuser}</Grid>\r\n                            </Grid>\r\n                            <Grid className='date'>{props.postcreat}</Grid>\r\n                        </Grid>\r\n                        <Grid className='postblank'></Grid>\r\n                        <Grid className='content'>{props.postcontent}</Grid>\r\n                    </Grid>\r\n                    {(props.user_id===props.postuser)?\r\n                    <Grid className ='postbtn'>\r\n                        <Button className='makedelbtn' onClick ={props.deletepost}>글삭제</Button>\r\n                        <Button className='makeupbtn' onClick ={props.postupdatestate}>글수정</Button></Grid>:''}\r\n                </Grid>:''}\r\n                {(props.state===4)?<Grid className='board'>{/*4=게시글 수정화면*/}\r\n                    <Grid className='post'>\r\n                        <textarea\r\n                            type='text'\r\n                            className='title' \r\n                            onChange={props.onposttitleChange}\r\n                        >{props.posttitle}</textarea>\r\n                        <textarea\r\n                            type='text'\r\n                            className='content'\r\n                            onChange={props.onpostcontentChange}\r\n                        >{props.postcontent}</textarea>\r\n                        <Grid className='btncol'>\r\n                            <Button className='makebtn' onClick = {props.updatepost}>수정</Button>\r\n                            <Button className='makebtn' onClick = {props.back}>돌아가기</Button>\r\n                        </Grid>\r\n                    </Grid>\r\n                </Grid>:''}\r\n                \r\n            </Grid>:''}\r\n            </Grid>\r\n        </Grid>\r\n    )    \r\n};\r\n\r\nexport default BoardView;","//게시판+게시글 화면을 조정하는 코드이다.\r\n//viewmodel에서 데이터를 받아와 원하는 변수에 담아 view에 전송해준다.\r\nimport React, { useState,useEffect } from 'react';\r\nimport { HeaderController  } from '../ui';\r\nimport BoardView from './BoardView';\r\nimport useStore from '../useStore';\r\nimport { useHistory } from 'react-router-dom';\r\n\r\nconst BoardController = ({ viewModel }) => {\r\n    const { Auth } = useStore();\r\n    const history = useHistory();\r\n    const [boardlist,setBoardlist] = useState([]);          //게시판 목록\r\n    const [postlist,setPostlist] = useState([]);            //특정게시판의 게시글 목록\r\n    const user_id = Auth.isLogged ? Auth.data.user_id:''    //로그인 되어있으면 현재 사용자id, 안되어있으면 공백\r\n    const [board_name,setBoard_name] = useState('');        //생성할 게시판이름\r\n    const [board,setBoard] = useState('');                  //유저가 보고있는 게시판의 ID\r\n    const [boardtitle,setBoardtitle] = useState('');        //유저가 보고있는 게시판의 이름\r\n    const [changestate,setChangestate] = useState(false);   //false=게시판을 수정하기를 원함,true=원하지않음\r\n    const [rename,setRename] = useState('');                //수정할 게시판의 새이름\r\n    const [state,setState] = useState(1);                   //state에 따라 화면을 정한다. - BoardView.js\r\n    const [postid,setPostid] = useState('');                //유저가 보고있는 게시글의 ID\r\n    const [title,setTitle] = useState('');                  //게시글 작성시 제목\r\n    const [content,setContent] = useState('');              //게시글 작성시 내용\r\n    const [posttitle,setPosttitle] = useState('');          //유저가 보고있는 게시글의 제목\r\n    const [postcontent,setPostcontent] = useState('');      //유저가 보고있는 게시글의 내용\r\n    const [postcreat,setPostcreate] = useState('');         //유저가 보고있는 게시글의 작성날짜\r\n    const [postuser,setPostuser] = useState('');            //유저가 보고있는 게시글의 작성자\r\n    const [updatetitle,setUpdatetitle] = useState('');      //게시글을 수정할 때 새 제목\r\n    const [updatecontent,setUpdatecontent] = useState('');  //게시글을 수정할 때 새 내용\r\n\r\n    \r\n    \r\n    //게시판 목록을 받아오는 함수\r\n    const getboardlist = async (del) => {           //del 어느 버튼에서 요청한 것인지 확인(0=페이지렌더링시+게시판생성후,1=게시판삭제후)\r\n        const test = await viewModel.boardlist();   //viewModel에 게시판들의 목록을 요청\r\n        const status = test?.status;\r\n        if(test.data.length !==0){\r\n            if(board===''){\r\n                setBoard(test.data[0].board_id);\r\n                setBoardtitle(test.data[0].board_name);\r\n                onboard(test.data[0].board_id);}\r\n            else if(del===1){\r\n                setBoard(test.data[0].board_id);\r\n                setBoardtitle(test.data[0].board_name);\r\n                onboard(test.data[0].board_id);\r\n            }else{\r\n                setBoard(board);\r\n                onboard(board);\r\n            }\r\n        }\r\n        if (status === 200) {\r\n            setBoardlist(test.data);\r\n        }\r\n        else {\r\n            alert('내부 서버 오류입니다.');\r\n        }\r\n    }\r\n\r\n    //게시판 생성\r\n    const onboardnameChange= (e) =>{//생성할 게시판이름\r\n        setBoard_name(e.target.value);\r\n    }\r\n    const makeboard = ()=>{//게시판 생성함수\r\n        if(Auth.isLogged === false){ history.replace('/login');}\r\n        else{\r\n            if(board_name===''){\r\n                alert('게시판 이름을 작성해야합니다.');\r\n            }\r\n            else{\r\n                viewModel.makeboard(user_id, board_name); //게시판 작성을 viewModel로 필요 정보와 함께 요청\r\n                setBoard_name('');\r\n                getboardlist(0);\r\n            }\r\n        }\r\n    }\r\n    const change =() =>{//수정 버튼 클릭시 실행함수\r\n        setChangestate(true);\r\n    }\r\n    const onRename =(e) =>{//수정할 게시판의 새이름\r\n        setRename(e.target.value);\r\n    }\r\n    const boardupdate =() =>{//게시판 수정 함수\r\n        if(rename===''){setChangestate(false);}\r\n        else{\r\n            setBoardtitle(rename);\r\n            viewModel.board_update(board,rename,user_id);   //게시판 수정을 viewModel로 필요 정보와 함께 요청\r\n            setRename('');\r\n            setChangestate(false);\r\n            getboardlist(0);\r\n        }\r\n    }\r\n    const deleteboard = () =>{                  //게시판을 삭제하는 함수\r\n        viewModel.board_delete(user_id,board);  //viewModel로 정보와 함께 게시판 삭제를 요청\r\n        getboardlist(1);\r\n    }\r\n\r\n    //게시글 생성\r\n    const ontitleChange = (e) => {//게시글 작성시 제목\r\n        setTitle(e.target.value);\r\n    }\r\n    const oncontentChange = (e) => {//게시글 작성시 내용\r\n        setContent(e.target.value);\r\n    }\r\n    const post =() =>{//게시글 생성 함수\r\n        if(title ===''){\r\n            alert('제목을 적어주세요.');\r\n        }\r\n        else if(content === '') {\r\n            alert('내용을 작성하지 않았습니다.');\r\n        }\r\n        else{\r\n            viewModel.makepost(board,user_id,title,content);//게시글 작성을 viewModel로 필요정보와 함께 요청\r\n            setState(1);\r\n            setBoard(board);\r\n            onboard(board);\r\n        }\r\n    }\r\n    const postupdatestate=()=>{                 //게시글 수정을 원할 때\r\n        setState(4);                            //게시글 수정화면\r\n    }\r\n    const onposttitleChange = (e) => {          //게시글을 수정할 때 새 제목\r\n        setUpdatetitle(e.target.value);\r\n    }\r\n    const onpostcontentChange = (e) => {        //게시글을 수정할 때 새 내용\r\n\r\n        setUpdatecontent(e.target.value);\r\n    }\r\n    const updatepost=()=>{                      //게시글 수정\r\n        viewModel.updatepost(postid, user_id, updatetitle, updatecontent);//게시글들수정을 viewModel에 필요 정보들과 함께 요청\r\n        setState(1);\r\n        onboard(board);\r\n    }\r\n    const deletepost =()=>{                     //게시글 삭제\r\n        viewModel.deletepost(postid,user_id);   //게시글들삭제를 viewModel에 필요 정보들과 함께 요청\r\n        onboard(board);\r\n        setState(1);\r\n    }\r\n    \r\n    //페이지가 렌더링 되고 다른 입력없이 실행되는 함수(게시판 목록을 가져온다.)\r\n    useEffect(() => {\r\n        getboardlist(0);\r\n      },[]);\r\n\r\n    \r\n    \r\n    const onClickboard =(board_id,title)=>{//선택한 게시판의 정보를 원하는 변수에 입력하는 함수\r\n        setBoardtitle(title);\r\n        onboard(board_id);\r\n    }\r\n\r\n    const onboard= async(board_id) =>{//board_id의 게시글들의 목록을 설정하는 함수\r\n        setBoard(board_id);\r\n        const test = await viewModel.boardpostlist(board_id);//board_id의 게시글들의 목록을 viewModel에 요청\r\n        \r\n        //다른 화면에서 페이지 이동 되었을 때 다른 변수 초기화\r\n        setTitle('');\r\n        setContent('');\r\n        setRename('');\r\n        setChangestate(false);\r\n        setState(1);            //게시글 목록을 보여주는 상태\r\n        setPostlist(test.data); //게시글 목록을 선택한 게시판의 게시글 목록으로 변화  \r\n\r\n    }\r\n\r\n    const onpost= (post_id) =>{ //게시글을 선택 했을 때 실행되는 함수\r\n        //다른 화면에서 페이지 이동 되었을 때 다른 변수 초기화\r\n        setTitle('');\r\n        setContent('');\r\n        setRename('');\r\n        setState(3);            //게시시글을 보여주는 화면\r\n        getdetail(post_id);\r\n    }\r\n    \r\n    const makepost = ()=>{ //글쓰기 버튼 클릭시 실행함수\r\n        if(Auth.isLogged === false){ history.replace('/login');}\r\n        else{\r\n            setTitle('');\r\n            setContent('');\r\n            setRename('');\r\n            setState(2);//게시글 생성화면\r\n        }\r\n    }\r\n    \r\n    const getdetail = async (post_id) => {                  //선택한 게시글 정보 가져오는 함수\r\n        const test = await viewModel.postdetail(post_id);   //선택한 게시글 정보를 viewModel에 요청\r\n        const status = test?.status;\r\n        const data = test.data\r\n        setPostid(data.post_id);\r\n        setPosttitle(data.post_title);\r\n        setPostcontent(data.post_content);\r\n        const alltime = data.updated_at;\r\n        const idx = alltime.indexOf(\"T\");\r\n        const date = alltime.substring(0,idx);\r\n        setPostcreate(date);\r\n        setPostuser(data.user_id);\r\n        if (status === 200) {\r\n        }\r\n        else {\r\n            alert('내부 서버 오류입니다.');\r\n        }\r\n    }\r\n\r\n    \r\n    const back=()=>{                    //이전화면으로 돌아가기\r\n        if(state===2){setState(1);}     //글 작성시 게시판의 게시글 목록\r\n        else{setState(3);}              //글 수정시 글 화면\r\n    }\r\n\r\n    \r\n    \r\n    return (\r\n        <>\r\n        <HeaderController header='게시판' />\r\n        <BoardView \r\n            onboardnameChange={onboardnameChange}\r\n            makeboard={makeboard}\r\n            makepost={makepost}\r\n            onboard={onboard}\r\n            onpost={onpost}\r\n            deleteboard={deleteboard}\r\n            boardupdate={boardupdate}\r\n            change={change}\r\n            onRename={onRename}\r\n            ontitleChange={ontitleChange}\r\n            oncontentChange={oncontentChange}\r\n            post={post}\r\n            deletepost={deletepost}\r\n            updatepost={updatepost}\r\n            onposttitleChange={onposttitleChange}\r\n            onpostcontentChange={onpostcontentChange}\r\n            postupdatestate={postupdatestate}\r\n            onClickboard={onClickboard}\r\n            back={back}\r\n            board={board}\r\n            user_id={user_id}\r\n            state={state}\r\n            boardlist = {boardlist}\r\n            postlist = {postlist}\r\n            changestate={changestate}\r\n            posttitle={posttitle}\r\n            postcontent={postcontent}\r\n            postcreat={postcreat}\r\n            postuser={postuser}\r\n            boardtitle={boardtitle}/>\r\n        </>\r\n    );\r\n};\r\n\r\nexport default BoardController;","//아이디 찾기 화면을 결정하는 view\r\nimport React from 'react';\r\nimport { Grid, Divider } from '@material-ui/core';\r\nimport { Link } from 'react-router-dom';\r\n\r\nconst IdView = (props) => {\r\n    return (\r\n        <Grid container direction='column'>\r\n            <Grid className='contents'>\r\n                <Grid className='logo'>HELP</Grid>\r\n                    <Grid className='join_title'>이메일</Grid>\r\n                    <input\r\n                        type=\"email\"\r\n                        className='login'\r\n                        placeholder={'email'}\r\n                        onChange={props.onEmailChange}\r\n                    />\r\n                    <button type='button' className='loginbtn' onClick={props.find}>아이디 찾기</button>\r\n                    <Divider/>\r\n                    <Grid className='link'>\r\n                        <Link className='a' to={'/login'}>로그인</Link>|\r\n                        <Link className='a' to={'/findpw'}>비밀번호 찾기</Link>|\r\n                        <Link className='a' to={'/signup'}>회원가입</Link>\r\n                    </Grid>\r\n            </Grid>\r\n        </Grid>\r\n    )    \r\n};\r\n\r\nexport default IdView;","//아이디찾기 화면을 조정하는 코드이다.\r\n//viewmodel에서 데이터를 받아와 원하는 변수에 담아 view에 전송해준다.\r\nimport React, { useState } from 'react';\r\nimport { useHistory } from \"react-router-dom\";\r\nimport IdView from './IdView';\r\nimport { HeaderController } from '../ui';\r\n\r\nconst IdController = ({ viewModel }) => {\r\n    const history = useHistory();\r\n    const [email, setEmail] = useState(''); //email\r\n\r\n    const onEmailChange = (e) => {//email작성\r\n        setEmail(e.target.value);\r\n    }\r\n    const find = async () => {//유저가 작성한 email로 유저의 ID를 찾는다.\r\n        const connect = await viewModel.findid(email);//아이디 찾기를 email과 함께 viewModel로 요청\r\n        const status = connect?.status;\r\n        if (status === 200) {\r\n            alert('당신의 아이디는'+connect.data.user_id+'입니다.');\r\n            history.replace('/login');\r\n        } else if (status === 404 || status === 403) {\r\n            if(email===''){\r\n                alert('email을 작성하셔야 합니다.');\r\n            }\r\n            else{\r\n            alert(connect.data.detail);}\r\n        } else {\r\n            alert('내부 서버 오류입니다.');\r\n        }\r\n    }\r\n    return (\r\n        <>\r\n        <HeaderController\r\n            header={'아이디찾기'}\r\n        />\r\n        <IdView\r\n            onEmailChange={onEmailChange}\r\n            find={find}\r\n        />\r\n        </>\r\n    );\r\n};\r\n\r\nexport default IdController;","//비밀번호 찾기 화면을 결정하는 view\r\nimport React from 'react';\r\nimport { Grid, Divider, NativeSelect } from '@material-ui/core';\r\nimport { Link } from 'react-router-dom';\r\n\r\nconst PwView = (props) => {\r\n    return (\r\n        <Grid container direction='column'>\r\n            <Grid className='contents'>\r\n                <Grid className='logo'>HELP</Grid>\r\n                    <Grid className='join_title'>아이디</Grid>\r\n                    <input\r\n                        type='text'\r\n                        className='login'\r\n                        placeholder={'아이디'}\r\n                        onChange={props.onIdChange}\r\n                    />\r\n                    <Grid className='join_title'>이름</Grid>\r\n                    <input\r\n                        type=\"text\"\r\n                        className='login'\r\n                        placeholder={'이름'}\r\n                        onChange={props.onNameChange}\r\n                    />\r\n                    <Grid className='join_title'>힌트</Grid>\r\n                    <NativeSelect\r\n                        onChange={props.onQuestChange}\r\n                        className='GenderSelect'>\r\n                        <option aria-label=\"\" value=\"\" >질문</option>\r\n                        <option value=\"1\">당신의 아버지 성함은?</option>\r\n                        <option value=\"2\">당신의 어머니 성함은?</option>\r\n                        <option value=\"3\">당신이 사는 지역은?</option>\r\n                        <option value=\"4\">당신의 모교는?</option>\r\n                    </NativeSelect>\r\n                    <input\r\n                        type=\"text\"\r\n                        className='login'\r\n                        placeholder={'힌트대답'}\r\n                        onChange={props.onHintChange}\r\n                    />\r\n                    <button type='button' className='loginbtn' onClick ={props.findPw}>비밀번호 찾기</button>\r\n                    <Divider/>\r\n                    <Grid className='link'>\r\n                        <Link className='a' to={'/login'}>로그인</Link>|\r\n                        <Link className='a' to={'/findid'}>아이디 찾기</Link>|\r\n                        <Link className='a' to={'/signup'}>회원가입</Link>\r\n                    </Grid>\r\n            </Grid>\r\n        </Grid>\r\n    )    \r\n};\r\n\r\nexport default PwView;","//비밀번호찾기 화면을 조정하는 코드이다.\r\n//viewmodel에서 데이터를 받아와 원하는 변수에 담아 view에 전송해준다.\r\nimport React, { useState } from 'react';\r\nimport { useHistory } from \"react-router-dom\";\r\nimport PwView from './PwView';\r\nimport { HeaderController } from '../ui';\r\n\r\nconst PwController = ({ viewModel }) => {\r\n    const history = useHistory();\r\n    const [quest, setQuest] = useState('');     //질문번호\r\n    const [hint, setHint] = useState('');       //대답\r\n    const [userid, setUserid] = useState('');   //유저ID\r\n    const [name, setName] = useState('');       //이름\r\n\r\n    const onIdChange = (e) =>{//아이디작성\r\n        setUserid(e.target.value);\r\n    }\r\n    const onNameChange = (e) =>{//이름작성\r\n        setName(e.target.value);\r\n    }\r\n    const onQuestChange = (e) =>{//질문선택\r\n        setQuest(e.target.value);\r\n    }\r\n    const onHintChange = (e) =>{//대답작성\r\n        setHint(e.target.value);\r\n    }\r\n    \r\n    \r\n    \r\n    const findPw = async() =>{//비밀번호 찾기 함수\r\n        if(quest==='' || hint==='' || name==='' || userid===''){\r\n            alert('위의 항목들을 모두 작성해야합니다.');\r\n        }else{\r\n            const connect = await viewModel.findpw(userid,name,quest,hint);//비밀번호 찾기를 필요정보와함께 viewModel에게 요청\r\n            const status = connect?.status;\r\n            if (status === 200) {\r\n                alert(userid+'아이디의 비밀번호는'+connect.data.user_pw+'입니다.');\r\n                history.replace('/login');\r\n            } else if (status === 403) {//이름과 힌트를 다시 확인해주세요.\r\n                alert(connect.data.message);\r\n            }else if(status === 404){//찾을 수 없습니다.\r\n                alert(connect.data.detail);\r\n            }\r\n             else {\r\n                alert('내부 서버 오류입니다.');\r\n            }\r\n        }\r\n    }\r\n\r\n    return (\r\n        <>\r\n        <HeaderController\r\n            header={'비밀번호찾기'}\r\n        />\r\n        <PwView\r\n            onHintChange={onHintChange}\r\n            onQuestChange={onQuestChange}\r\n            onNameChange={onNameChange}\r\n            onIdChange={onIdChange}\r\n            findPw={findPw}\r\n        />\r\n        </>\r\n    );\r\n};\r\n\r\nexport default PwController;","//내스터디 목록 화면을 결정하는 view\r\nimport React from 'react';\r\nimport { Grid } from '@material-ui/core';\r\nimport { GroupForm  } from '../ui';\r\n\r\nconst MystudyView = (props) => {\r\n    return (\r\n        <Grid container direction='column'>\r\n            <Grid className ='grouplist'>\r\n                    <GroupForm groupdata = {props.groupdata}/>\r\n            </Grid>\r\n        </Grid>\r\n    )    \r\n};\r\n\r\nexport default MystudyView;","//내스터디 목록 화면을 조정하는 코드이다.\r\n//viewmodel에서 데이터를 받아와 원하는 변수에 담아 view에 전송해준다.\r\nimport React, { useState,useEffect } from 'react';\r\n\r\nimport { HeaderController } from '../ui';\r\nimport MystudyView from './MystudyView';\r\nimport { useHistory } from 'react-router-dom';\r\nimport useStore from '../useStore';\r\n\r\n\r\nconst MystudyController = ({ viewModel }) => {\r\n    const { Auth } = useStore();\r\n    const history = useHistory();\r\n\r\n    const [list,setList] = useState([]);                //내스터디 목록\r\n    const id = Auth.isLogged ? Auth.data.user_id:'';    //로그인 되어있으면 현재 사용자id, 안되어있으면 공백\r\n\r\n    const getlist = async () => {//내스터디 목록을 가져오는 함수\r\n        const test = await viewModel.mylist(id);//내스터디 목록을 viewModel에 요청\r\n        const status = test?.status;\r\n        setList(test.data);\r\n        if (status === 200) {\r\n            \r\n        }\r\n        else {\r\n            alert('내부 서버 오류입니다.');\r\n        }\r\n    }\r\n\r\n    //페이지가 렌더링 되고 다른 입력없이 실행되는 함수(스터디 목록을 가져온다.)\r\n    useEffect(() => {\r\n        getlist();\r\n      },[]);\r\n      \r\n    return (\r\n        <>\r\n            <HeaderController header='내스터디' />\r\n            <MystudyView \r\n                groupdata = {list}\r\n            />\r\n        </>\r\n    );\r\n};\r\n\r\nexport default MystudyController;","//소켓통신을 테스트하는 페이지+화면\r\nimport React, { useState, useEffect } from 'react';\r\n\r\nconst Test = () => {\r\n  const [test, setTest] = useState('1234');\r\n  useEffect(() => {\r\n    let socketPath = 'ws://127.0.0.1:8000/ws/helpapp/' + 'abcd';\r\n    const socket = new WebSocket(socketPath);\r\n    socket.onopen = function () {\r\n      socket.send(\r\n        JSON.stringify({\r\n          room_name: 'abcd',\r\n          message: 'efgh',\r\n        }),\r\n      );\r\n    };\r\n  }, [])\r\n  return(\r\n    <div>\r\n      {test}\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default Test;","//model가 서버에서 받은 데이터를 controller들에게 전달해준다.\r\nclass ViewModel {\r\n    constructor(model) {\r\n       this.model = model;\r\n       this.login = this.login.bind(this);\r\n    }\r\n    makeStudy = (user, study, capacity) => {\r\n        return this.model.makeStudy(user, study, capacity);\r\n    }\r\n    login = (id, pw) => {\r\n        return this.model.login(id, pw);\r\n    }\r\n    signUp = (id, pw, name, gender, email, quest, hint) => {\r\n        return this.model.signUp(id, pw, name, gender, email, quest, hint);\r\n    }\r\n    exercise = (expart, times, btn) => {\r\n        return this.model.exercise(expart, times, btn);\r\n    }\r\n\r\n    join = (user,study) => {\r\n        return this.model.join(user,study);\r\n    }\r\n    disjoin = (user,study) => {\r\n        return this.model.disjoin(user,study);\r\n    }\r\n    list = async() => {\r\n        return await this.model.list();\r\n    }\r\n    member = async(study_id) => {\r\n        return await this.model.member(study_id);\r\n    }\r\n    study_detail = async(study_id) => {\r\n        return await this.model.study_detail(study_id);\r\n    }\r\n    boardlist = async() => {\r\n        return await this.model.boardlist();\r\n    }\r\n    makeboard = async(user_id, board_name) => {\r\n        return await this.model.makeboard(user_id, board_name);\r\n    }\r\n    board_search = async(board_id) => {\r\n        return await this.model.board_search(board_id);\r\n    }\r\n    board_update = async(board_id,board_name,user_id) => {\r\n        return await this.model.board_update(board_id,board_name,user_id);\r\n    }\r\n    board_delete = async(user_id,board_id) => {\r\n        return await this.model.board_delete(user_id,board_id);\r\n    }\r\n    boardpostlist = async(board_id) => {\r\n        return await this.model.boardpostlist(board_id);\r\n    }\r\n    makepost = async(board_id,user_id,post_title,post_content) => {\r\n        return await this.model.makepost(board_id,user_id,post_title,post_content);\r\n    }\r\n    postdetail = async(post_id) => {\r\n        return await this.model.postdetail(post_id);\r\n    }\r\n    updatepost = async(post_id, user_id, post_title, post_content) => {\r\n        return await this.model.updatepost(post_id, user_id, post_title, post_content);\r\n    }\r\n    deletepost = async(post_id, user_id) => {\r\n        return await this.model.deletepost(post_id, user_id);\r\n    }\r\n    findid = (email) => {\r\n        return this.model.findid(email);\r\n    }\r\n    findpw = (userid,user_name,quest,hint) => {\r\n        return this.model.findpw(userid,user_name,quest,hint);\r\n    }\r\n    changepw = (user_id,user_pw)=>{\r\n        return this.model.changepw(user_id,user_pw);\r\n    }\r\n    mylist = async(user_id) => {\r\n        return await this.model.mylist(user_id);\r\n    }\r\n}\r\n\r\nexport default ViewModel;","//서버와 연동하는 부분//\r\n\r\nimport { ContactSupportOutlined } from '@material-ui/icons';\r\nimport axios from 'axios';\r\nimport useStore from './useStore';\r\nconst { Auth } = useStore();\r\n\r\nclass Model {\r\n    constructor() {\r\n        this.login = this.login.bind(this);\r\n    }\r\n    // 스터디 생성 (유저id,스터디이름,스터디수용가능인원)\r\n    makeStudy(user, study, capacity) {\r\n        axios.post('/studies/new', {\r\n            user_id: user,\r\n            study_name:study,\r\n            capacity: capacity,\r\n        })\r\n        .then((res) => {\r\n        })\r\n        .catch((e) => {\r\n        });\r\n    }\r\n    // 로그인(아이디,비밀번호)\r\n    login = (id, pw) => {\r\n        this.loginData = {\r\n            id,\r\n            pw,\r\n        };\r\n        const result = axios.post('/login', {\r\n            user_id: id,\r\n            user_pw: pw\r\n        })\r\n        .then((res) => {\r\n            this.loginSuccess(res);\r\n            return res;\r\n        })\r\n        .catch((error) => {\r\n            return error.response;\r\n        });\r\n        return result;\r\n    }\r\n\r\n    \r\n    silentRefresh = () => {\r\n        axios.post('/silent-refresh', this.loginData)\r\n        .then(this.loginSuccess)\r\n        .catch(() => {\r\n            Auth.logout();\r\n        });\r\n    }\r\n    // 로그인 성공시 {Auth}에 유저 정보 저장\r\n    loginSuccess = (response) => {\r\n        const accessToken = response.data;\r\n        Auth.login(response.data);\r\n        axios.defaults.headers.common['Authorization'] = `Bearer ${accessToken}`;\r\n\r\n        // setTimeout(this.silentRefresh, JWT_EXPIRY_TIME - 60000)\r\n    }\r\n\r\n    // 회원가입(아이디,비밀번호,이름,성별,e-mail,질문,대답)\r\n    signUp(id, pw, name,gender, email, quest, hint) {\r\n        const result = axios.post('/users/new', {\r\n            user_id: id,\r\n            user_pw: pw,\r\n            user_name: name,\r\n            gender: gender,\r\n            question_number: Number(quest),\r\n            hint: hint,\r\n            email: email\r\n        })\r\n        .then((res) => {\r\n            return res;\r\n        })\r\n        .catch((err) => {\r\n            return err.response;\r\n        })\r\n        return result;\r\n    }\r\n    // 운동 (부위, 시간, 운동상태전송) 1=>운동중, 2=>운동종료\r\n    exercise(expart, times, btn) {\r\n        let socketPath = 'ws://ec2-52-78-132-234.ap-northeast-2.compute.amazonaws.com:8000/ws/helpapp/' + Auth.data.user_id;\r\n        const socket = new WebSocket(socketPath);\r\n\r\n        socket.onopen = function () {\r\n            socket.send(\r\n                JSON.stringify({\r\n                    user_id: Auth.data.user_id,\r\n                    time: times,\r\n                    expart: expart,\r\n                    btn: btn\r\n                })\r\n            )\r\n        }\r\n    }\r\n    //가입(유저ID,스터디ID)\r\n    join(user,study) {\r\n        axios.post('../studies/'+study+'/join', {\r\n            study_id: study,\r\n            user_id: user\r\n        })\r\n        .then((res) => {\r\n            return res;\r\n        })\r\n        .catch((e) => {\r\n        });\r\n    }\r\n    //탈퇴(유저ID,스터디ID)\r\n    disjoin(user,study) {\r\n        axios.post('../studies/'+study+'/disjoin', {\r\n            study_id: study,\r\n            user_id: user\r\n        })\r\n        .then((res) => {\r\n            return res;\r\n        })\r\n        .catch((e) => {\r\n        });\r\n    }\r\n    //스터디 목록 - DB에 있는 스터디들의 정보를 가져온다.\r\n    list = () => { \r\n        let data = axios.get('/studies')\r\n            .then((res)=>{\r\n                return res;});\r\n        return data;\r\n    }\r\n    //스터디 세부정보(스터디ID) - DB에 있는 특정 스터디의 세부정보를 가져온다.\r\n    study_detail = (study_id) =>{ \r\n        let data = axios.post('../../studies/'+study_id,{\r\n            study_id: study_id})\r\n            .then((res)=>{\r\n                return res;});\r\n        return data;\r\n    }\r\n    //스터디내의 유저들정보(스터디ID)\r\n    member = (study_id) =>{ \r\n        let data = axios.post('../../studies/'+study_id+'/userlist',{\r\n            study_id: study_id\r\n        })\r\n            .then((res)=>{\r\n                return res;});\r\n        return data;\r\n    }\r\n    //게시판 리스트 -DB에 있는 게시판들의 정보를 가져온다.\r\n    boardlist = () =>{ \r\n        let data = axios.get('/boards')\r\n            .then((res)=>{\r\n                return res;});\r\n        return data;\r\n    }\r\n    //게시판 생성(유저ID, 게시판이름)\r\n   makeboard = (user_id, board_name) =>{ \r\n    let data = axios.post('/boards/new',{\r\n        user_id: user_id, \r\n        board_name: board_name\r\n    })\r\n        .then((res)=>{\r\n            return res;});\r\n    return data;\r\n    }\r\n   //게시판 조회 (게시판ID)\r\n   board_search = (board_id) =>{ \r\n    let data = axios.post('/boards/'+board_id,{\r\n        board_id: board_id\r\n    })\r\n        .then((res)=>{\r\n            return res;});\r\n    return data;\r\n    }\r\n    //게시판 수정 (게시판ID, 수정될게시판이름, 유저ID) - 유저ID가 게시판 만든유저와 같아야 수정된다.\r\n    board_update = (board_id,board_name,user_id) =>{ \r\n    let data = axios.post('/boards/'+board_id+'/update',{\r\n        board_id: board_id,\r\n        board_name: board_name,\r\n        user_id: user_id\r\n    })\r\n        .then((res)=>{\r\n            return res;});\r\n    return data;\r\n    }\r\n    //게시판 삭제 (유저ID, 게시판ID) - 유저ID가 게시판 만든유저와 같아야 삭제된다.\r\n    board_delete = (user_id,board_id) =>{ \r\n    let data = axios.post('/boards/'+board_id+'/delete',{\r\n        user_id: user_id,\r\n        board_id: board_id\r\n    })\r\n        .then((res)=>{\r\n            return res;});\r\n    return data;\r\n    }\r\n    //특정 게시판글들 조회(게시판ID) - 특정게시판에 있는 게시글들의 정보를 배열로 가져온다.\r\n    boardpostlist = (board_id) =>{ \r\n    let data = axios.post('/boards/'+board_id+'/board_postlist',{\r\n        board_id: board_id\r\n    })\r\n        .then((res)=>{\r\n            return res;});\r\n    return data;\r\n    }\r\n    //게시판글 작성(게시판ID, 유저ID,제목,내용)\r\n    makepost= (board_id,user_id,post_title,post_content) =>{ \r\n    let data = axios.post('/posts/new',{\r\n        board_id: board_id,\r\n        user_id: user_id,\r\n        post_title: post_title,\r\n        post_content: post_content\r\n    })\r\n        .then((res)=>{\r\n            return res;});\r\n    return data;\r\n    }\r\n    //특정 게시글 조회 (게시글ID)\r\n    postdetail = (post_id) =>{ \r\n        let data = axios.post('/posts/'+post_id,{\r\n            post_id: post_id\r\n        })\r\n            .then((res)=>{\r\n                return res;});\r\n        return data;\r\n    }\r\n    //특정 게시글 수정 (게시글ID, 유저ID,수정제목,수정내용) - 유저ID가 생성한유저와 같아야 수정된다.\r\n    updatepost = (post_id, user_id, post_title, post_content) =>{ \r\n        let data = axios.post('/posts/'+post_id+'/update',{\r\n            post_id: post_id,\r\n            user_id: user_id,\r\n            post_title: post_title,\r\n            post_content: post_content\r\n\r\n        })\r\n            .then((res)=>{\r\n                return res;});\r\n        return data;\r\n    }\r\n    //특정 게시글 삭제 (게시글ID, 유저ID) - 유저ID가 생성한유저와 같아야 삭제된다.\r\n    deletepost = (post_id, user_id) =>{ \r\n        let data = axios.post('/posts/'+post_id+'/delete',{\r\n            post_id: post_id,\r\n            user_id: user_id\r\n        })\r\n            .then((res)=>{\r\n                return res;});\r\n        return data;\r\n    }\r\n    //아이디 찾기(e-mail) - DB에 e-mail이 존재할경우 ID를 return\r\n    findid =(email)=>{\r\n        const data = axios.post('/users/find_id',{\r\n            email: email\r\n        })\r\n        .then((res)=>{\r\n            return res;})\r\n        .catch((error) => {\r\n            return error.response;\r\n        });\r\n        return data;\r\n    }\r\n    //비밀번호 찾기 (유저ID, 유저이름, 질문, 대답) - 전부 DB내용과 일치해야 비밀번호를 return해준다.\r\n    findpw =(userid,user_name,quest,hint)=>{\r\n        const data = axios.post('/users/find_pw',{\r\n            user_id: userid, \r\n            user_name: user_name, \r\n            question_number: Number(quest),\r\n            hint: hint\r\n        })\r\n        .then((res)=>{\r\n            return res;})\r\n        .catch((error) => {\r\n            return error.response;\r\n        });\r\n        return data;\r\n    }\r\n    //비밀번호변경(유저id, 변경할비밀번호)\r\n    changepw = (id, pw) => {\r\n        this.loginData = {\r\n            id,\r\n            pw,\r\n        };\r\n        const result = axios.post('/users/change_pw', {\r\n            user_id: id,\r\n            user_pw: pw\r\n        })\r\n        .then((res) => {\r\n            this.loginSuccess(res);\r\n            return res;\r\n        })\r\n        .catch((error) => {\r\n            return error.response;\r\n        });\r\n        return result;\r\n    }\r\n    //내 스터디 목록 (유저ID) 해당유저가 속한 스터디들을 배열로 return해준다.\r\n    mylist = (user_id) =>{ \r\n        const data = axios.post('users/'+user_id+'/mygroups',{\r\n            user_id: user_id\r\n        })\r\n            .then((res)=>{\r\n                return res;});\r\n        return data;\r\n    }\r\n    \r\n}\r\n\r\nexport default Model;","//주소에 따라 페이지를 연결해준다.\r\nimport React from 'react';\r\nimport { BrowserRouter, Switch, Route } from 'react-router-dom';\r\nimport {\r\n    HomeController, LoginController, SignUpController, GroupMakeController, GroupListController, GroupController,\r\n    UserInfoController, BoardController, Test ,IdController, PwController, MystudyController\r\n} from './view';\r\nimport ViewModel from './ViewModel'; \r\nimport Model from './Model';\r\n\r\nconst Provider = () => {\r\n    const model = new Model();\r\n    const viewModel = new ViewModel(model);\r\n    return (\r\n        <BrowserRouter>\r\n            <Switch>\r\n                <Route exact path='/' render={ () => <HomeController viewModel={viewModel} /> } />\r\n                <Route path='/login' render={ () => <LoginController viewModel={viewModel} /> } />\r\n                <Route path='/signup' render={ () => <SignUpController viewModel={viewModel} /> } />\r\n                <Route path='/groupmake' render={ () => <GroupMakeController viewModel={viewModel} /> } />\r\n                <Route path='/grouplist' render={ () => <GroupListController viewModel={viewModel} /> } />\r\n                <Route path='/group' render={ () => <GroupController viewModel={viewModel} /> } />\r\n                <Route path='/info' render={ () => <UserInfoController viewModel={viewModel} /> } />\r\n                <Route path='/board' render={ () => <BoardController viewModel={viewModel} /> } />\r\n                <Route path='/findid' render={ () => <IdController viewModel={viewModel} /> } />\r\n                <Route path='/findpw' render={ () => <PwController viewModel={viewModel} /> } />\r\n                <Route path='/mygroup' render={ () => <MystudyController viewModel={viewModel} /> } />\r\n                <Route path='/test' render={ () => <Test viewModel={viewModel} /> } />\r\n            </Switch>\r\n        </BrowserRouter>\r\n    )\r\n}\r\n\r\nexport default Provider;\r\n","import React from 'react'\r\nimport axios from 'axios';\r\n\r\nimport Provider from './components/Provider';\r\n\r\nimport './scss/main.scss';\r\n\r\nimport useStore from './components/useStore';\r\n\r\naxios.defaults.xsrfCookieName = 'csrftoken';\r\naxios.defaults.xsrfHeaderName = 'x-CSRFToken';\r\naxios.defaults.withCredentials = true\r\n\r\nfunction App() {\r\n  const { Auth } = useStore();\r\n  Auth.init();\r\n  return (\r\n    <Provider />\r\n  );\r\n}\r\n\r\nexport default App;\r\n\r\n","const reportWebVitals = onPerfEntry => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport reportWebVitals from './reportWebVitals';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n"],"sourceRoot":""}