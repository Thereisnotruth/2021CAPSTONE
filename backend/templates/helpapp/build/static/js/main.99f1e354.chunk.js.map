{"version":3,"sources":["components/view/LoginView.js","components/ui/Header.js","stores/Auth.js","components/useStore.js","components/ui/SideBar.js","components/ui/HeaderController.js","components/ui/GroupForm.js","components/ui/Member.js","components/ui/GroupMember.js","test.js","components/ui/Char.js","components/ui/Timer.js","components/ui/ElementLeft.js","components/ui/ElementRight.js","components/ui/UserInfoModal.js","components/ui/BoardList.js","components/ui/BoardListView.js","components/ui/PostList.js","components/view/LoginController.js","components/view/SignUpView.js","components/view/SignUpController.js","components/view/HomeView.js","components/view/HomeController.js","components/view/GroupView.js","components/view/GroupController.js","components/view/GroupListView.js","components/view/GroupListController.js","components/view/UserInfoView.js","components/view/UserInfoController.js","components/view/GroupMakeView.js","components/view/GroupMakeController.js","components/view/BoardView.js","components/view/BoardController.js","components/view/IdView.js","components/view/IdController.js","components/view/PwView.js","components/view/PwController.js","components/view/MystudyView.js","components/view/MystudyController.js","components/view/Test.js","components/ViewModel.js","components/Model.js","components/Provider.js","App.js","reportWebVitals.js","index.js"],"names":["LoginView","props","Grid","container","direction","className","type","placeholder","onChange","onIdChange","onPwChange","onClick","login","Divider","to","Header","Button","sideBarOpen","Menu","style","fontSize","header","Auth","observable","isLogged","data","init","this","JSON","parse","localStorage","getItem","userData","setItem","stringify","logout","clear","useStore","SideBar","history","useHistory","sideBarClose","Close","user_id","replace","undefined","HeaderController","useState","open","setOpen","Groupform","list","groupdata","map","index","study_id","key","current_user_count","capacity","study_name","study_total_time","created_at","Member","user_name","exercise_state","start_time","setStartTime","exState","setExState","hours","setHours","minutes","setMinutes","seconds","setSeconds","useEffect","t","Date","h","parseInt","m","s","diff_s","getSeconds","diff_m","getMinutes","diff_h","getHours","WebSocket","onmessage","e","time","d","ddif_s","countdown","setInterval","clearInterval","GroupMember","groupmembers","exercise_start_time","unityContext","UnityContext","loaderUrl","dataUrl","frameworkUrl","codeUrl","Char","on","canvas","width","height","getContext","SetChar","matchWebGLToCanvasSize","Timer","NativeSelect","exerciseChange","aria-label","value","message","status","start","stop","ElementLeft","item","xs","content","ElementRight","UserInfoModal","Modal","onClose","handleClose","aria-labelledby","aria-describedby","Paper","arm_exp","chest_exp","back_exp","shoulder_exp","belly_exp","leg_exp","BoardList","onboardnameChange","makeboard","boardlist","onClickboard","BoardListView","element","board_id","href","ev","preventDefault","board_name","PostList","postlist","onpost","post_id","post_title","substring","LoginController","viewModel","id","setId","pw","setPw","a","connect","alert","target","SignupView","message1","onEmailChange","message7","message2","onPwCheChange","message3","onNameChange","message4","genderChange","message5","questChange","message6","onHintChange","message8","Signup","SignupController","email","setEmail","cpw","setCpw","name","setName","gender","setGender","quest","setQuest","hint","setHint","setMessage1","setMessage2","setMessage3","setMessage4","setMessage5","setMessage6","setMessage7","setMessage8","checkAlphaNum","str","test","signUp","HomeView","run","HomeController","setTime","interv","setInterv","setStatus","setmessage","expart","setExpart","today","updatedH","updatedM","updatedS","levelChange","times","Headandchest_level","levelcheck1","Back_level","levelcheck2","Arm_level","Lowerbody_level","Abs_level","Shoulder_level","Gender","send","parttime","islogged","now","exercise","GroupView","groupname","groupmember","ismember","join","disjoin","Exercisemember","GroupController","useRef","memberlist","setMemberlist","studydetail","setStudydetail","setgroupname","setgroupmember","setExercisemember","notice","setnotice","setIsmember","location","pathname","getmember","member","find","filter","length","getstudy_detail","study_detail","GrouplistView","GroupForm","Fab","make","GrouplistController","setList","getlist","ColorButton","withStyles","root","backgroundColor","margin","UserInfoView","variant","handleOpen","color","state","pwChange","onCpwChange","UserInfoController","setMessage","setState","changepw","GroupMakeView","onStudyChange","CapacityChange","MakeStudy","GroupMakeController","user","study","setStudy","setCapacity","makeStudy","BoardView","board","boardtitle","changestate","onRename","boardupdate","makepost","deleteboard","change","ontitleChange","oncontentChange","post","back","posttitle","postuser","postcreat","postcontent","deletepost","postupdatestate","onposttitleChange","onpostcontentChange","updatepost","BoardController","setBoardlist","setPostlist","setBoard_name","setBoard","setBoardtitle","setChangestate","rename","setRename","postid","setPostid","title","setTitle","setContent","setPosttitle","setPostcontent","setPostcreate","setPostuser","updatetitle","setUpdatetitle","updatecontent","setUpdatecontent","getboardlist","del","onboard","boardpostlist","getdetail","postdetail","post_content","alltime","updated_at","idx","indexOf","date","board_delete","board_update","IdView","IdController","findid","detail","PwView","onQuestChange","findPw","PwController","userid","setUserid","findpw","user_pw","MystudyView","MystudyController","mylist","Test","socket","onopen","room_name","ViewModel","model","userInfo","btn","board_search","bind","Model","loginData","axios","then","res","loginSuccess","catch","error","response","silentRefresh","accessToken","defaults","headers","common","err","get","question_number","Number","socketPath","Provider","exact","path","render","SignUpController","GroupListController","xsrfCookieName","xsrfHeaderName","withCredentials","App","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.99f1e354.chunk.js","sourcesContent":["import React from 'react';\r\nimport { Grid, Divider } from '@material-ui/core';\r\nimport { Link } from 'react-router-dom';\r\n\r\nconst LoginView = (props) => {\r\n    return (\r\n        <Grid container direction='column'>\r\n            <Grid className='contents'>\r\n                <Grid className='logo'>HELP</Grid>\r\n                <input\r\n                    type='text'\r\n                    className='login' \r\n                    placeholder={'아이디'}\r\n                    onChange={props.onIdChange}\r\n                />\r\n                <input\r\n                    type='password'\r\n                    className='login'\r\n                    placeholder={'비밀번호'}\r\n                    onChange={props.onPwChange}\r\n                />\r\n                <button type='button' className='loginbtn' onClick={props.login}>로그인</button>\r\n                <Divider className='logindivider' />\r\n                <Grid className='link'>\r\n                <Link className='a' to={'/findid'}>아아디 찾기</Link>\r\n                |<Link className='a' to={'/findpw'}>비밀번호 찾기</Link>\r\n                |<Link className='a' to={'/signup'}>회원가입</Link>\r\n                </Grid>\r\n            </Grid>\r\n        </Grid>\r\n    )    \r\n};\r\n\r\nexport default LoginView;","import React from 'react';\r\nimport { Grid, Button } from '@material-ui/core';\r\nimport { Menu } from '@material-ui/icons';\r\n\r\nconst Header = (props) => {\r\n    return (\r\n        <Grid className='header'>\r\n            <Button onClick={props.sideBarOpen}>\r\n                <Menu className='sidebar_button'style={{ fontSize: '10vh' }}/>\r\n            </Button>\r\n            {props.header}\r\n        </Grid>\r\n    )\r\n};\r\n\r\nexport default Header;","import { observable } from 'mobx';\r\n\r\nconst Auth = observable({\r\n    isLogged: false,\r\n    data: {},\r\n\r\n    init() {\r\n        this.data = JSON.parse(localStorage.getItem('userInfo'));\r\n        if (this.data != null)\r\n            this.isLogged = true;\r\n        else {\r\n            this.isLogged = false;\r\n        }\r\n    },\r\n    login(userData) {\r\n        this.isLogged = true;\r\n        this.data = userData;\r\n        localStorage.setItem('userInfo', JSON.stringify(userData));\r\n    },\r\n    logout() {\r\n        this.isLogged = false;\r\n        localStorage.clear();\r\n    },\r\n});\r\n\r\nexport default Auth;","import { Auth } from '../stores';\r\n\r\nconst useStore = () => ({ Auth });\r\n\r\nexport default useStore;","import React from 'react';\r\nimport { Grid, Button, Divider } from '@material-ui/core';\r\nimport { Close } from '@material-ui/icons';\r\nimport { Link, useHistory } from 'react-router-dom';\r\n\r\nimport useStore from '../useStore';\r\nconst SideBar = (props) => {\r\n\tconst { Auth } = useStore();\r\n\tconst history = useHistory();\r\n\tconst test = () => {\r\n\t\tAuth.logout();\r\n\t\thistory.replace('/');\r\n\t}\r\n    return (\r\n        <Grid className='sidebar'>\r\n            <Grid className=\"sidebar-header\">\r\n\t\t\t\t<Button onClick={props.sideBarClose} className='close-button'>\r\n\t\t\t\t\t<Close />\r\n\t\t\t\t</Button>\r\n\t\t\t</Grid>\r\n\t\t\t{\r\n\t\t\t\tAuth.isLogged?\r\n\t\t\t\t<Link to='/info' className='sidebar-link'>\r\n\t\t\t\t\t<Button className='login-button'>\r\n\t\t\t\t\t\t{Auth.data.user_id}\r\n\t\t\t\t\t</Button>\r\n\t\t\t\t</Link>\r\n\t\t\t\t:\t\t\r\n\t\t\t\t<Link to='login' className='sidebar-link'>\r\n\t\t\t\t\t<Button className='login-button'>\r\n\t\t\t\t\t\t로그인\r\n\t\t\t\t\t</Button>\r\n\t\t\t\t</Link>\r\n\t\t\t}\r\n\t\r\n\t\t\t<Divider />\r\n\t\t\t<Link to='/' className='sidebar-link'>\r\n\t\t\t\t<Button className='sidebar-item'>\r\n\t\t\t\t\t캐릭터\r\n\t\t\t\t</Button>\r\n\t\t\t</Link>\r\n\t\t\t{\r\n\t\t\t\tAuth.isLogged?\r\n\t\t\t<Link to='/mygroup' className='sidebar-link'>\r\n\t\t\t\t<Button className='sidebar-item'>\r\n\t\t\t\t\t내 스터디 목록\r\n\t\t\t\t</Button>\r\n\t\t\t</Link>:''\r\n\t\t\t}\r\n\t\t\t<Link to='/grouplist' className='sidebar-link'>\r\n\t\t\t\t<Button className='sidebar-item'>\r\n\t\t\t\t\t스터디 목록\r\n\t\t\t\t</Button>\r\n\t\t\t</Link>\r\n\t\t\t<Link to='/board' className='sidebar-link'>\r\n\t\t\t\t<Button className='sidebar-item'>\r\n\t\t\t\t\t게시판\r\n\t\t\t\t</Button>\r\n\t\t\t</Link>\r\n\t\t\t{\r\n\t\t\t\tAuth.isLogged?\r\n\t\t\t\t<Button className='login-button' onClick={test}>\r\n\t\t\t\t\t로그아웃\r\n\t\t\t\t</Button>\r\n\t\t\t\t:\t\t\r\n\t\t\t\tundefined\r\n\t\t\t}\r\n        </Grid>\r\n    )\r\n};\r\n\r\nexport default SideBar;","import React, { useState } from 'react';\r\n\r\nimport Header from './Header';\r\nimport SideBar from './SideBar';\r\n\r\nconst HeaderController = (props) => {\r\n    const [open, setOpen] = useState(0);\r\n\r\n    const sideBarOpen = () => {\r\n        setOpen(1);\r\n    }\r\n    const sideBarClose = () => {\r\n        setOpen(0);\r\n    }\r\n    return (\r\n        <>\r\n        <Header\r\n            header={props.header}\r\n            sideBarOpen={sideBarOpen}\r\n        />\r\n        {\r\n\t\t\t\topen ?\r\n\t\t\t\t\t<SideBar\r\n\t\t\t\t\t\topen={open}\r\n                        sideBarClose={sideBarClose}\r\n\t\t\t\t\t/> : undefined\r\n\t\t\t}\r\n        </>\r\n    );\r\n};\r\n\r\nexport default HeaderController;","import React from 'react';\r\nimport { Grid} from '@material-ui/core';\r\nimport { Link} from 'react-router-dom';\r\nconst Groupform = (props) => {\r\n\r\n    const list = props.groupdata.map(\r\n        (groupdata, index) => ( <Link className = 'groups'  to={`/group/${groupdata.study_id}`} key={index}>\r\n            <Grid className = 'member'>인원:{groupdata.current_user_count}/{groupdata.capacity}</Grid>\r\n            <Grid className = 'groupname'>{groupdata.study_name}</Grid>\r\n            <Grid className = 'leader'>스터디 장:{groupdata.user_id}</Grid>\r\n            <Grid className = 'extime'>스터디 운동시간:{groupdata.study_total_time}</Grid>\r\n            <Grid className = 'start'>{groupdata.created_at}</Grid>\r\n            \r\n        </Link>)\r\n      );\r\n    return (\r\n        <Grid className = 'groupform'>\r\n            {list}\r\n        </Grid>\r\n        )\r\n};                \r\nexport default Groupform;","import React, { useEffect, useState } from 'react';\r\nimport { Grid } from '@material-ui/core';\r\nimport { GiWeightLiftingDown, GiWeightLiftingUp } from \"react-icons/gi\";\r\n\r\nimport MemberTimer from './MemberTimer';\r\n\r\nconst Member = (props) => {\r\n  const { user_id, user_name, exercise_state, start_time } = props;\r\n  const [startTime, setStartTime] = useState(start_time);\r\n  const [exState, setExState] = useState(exercise_state);\r\n  const [hours, setHours] = useState(0);\r\n  const [minutes, setMinutes] = useState(0);\r\n  const [seconds, setSeconds] = useState(0);\r\n\r\n  useEffect(() => {\r\n    const t = new Date();\r\n    let h = parseInt(start_time / 3600);\r\n    let m = parseInt((start_time - h * 3600) / 60);\r\n    let s = parseInt(start_time - h * 3600 - m * 60);\r\n    \r\n    let diff_s = t.getSeconds() - s;\r\n    let diff_m = t.getMinutes() - m;\r\n    let diff_h = t.getHours() - h;\r\n\r\n    if (diff_s < 0) {\r\n      diff_m--;\r\n      diff_s+= 60;\r\n    }\r\n    if (diff_m < 0) {\r\n      diff_h--;\r\n      diff_m += 60;\r\n    }\r\n    setHours(diff_h);\r\n    setMinutes(diff_m);\r\n    setSeconds(diff_s);\r\n    const socketPath = 'ws://10.178.0.2:8000/ws/helpapp/' + user_id;\r\n    const socket = new WebSocket(socketPath);\r\n    socket.onmessage = function (e) {\r\n      const data = JSON.parse(e.data);\r\n      setExState(data.exercise_state);\r\n      setStartTime(data.time);\r\n      h = parseInt(data.time/3600);\r\n      const d = new Date();\r\n\r\n      setHours(d.getHours() - h);\r\n      m = parseInt((data.time - h * 3600) / 60);\r\n      setMinutes(d.getMinutes() - m);\r\n      s = parseInt(data.time - h * 3600 - m * 60);\r\n      let ddif_s = d.getSeconds() - s;\r\n      setSeconds(d.getSeconds() - s);\r\n      if (ddif_s <= 0) {\r\n        setSeconds(1);\r\n      }\r\n    }\r\n  }, []); \r\n  useEffect(() => {\r\n    if (exState === true) {\r\n      const countdown = setInterval(() => {\r\n        if (parseInt(seconds) < 59) {\r\n          setSeconds(parseInt(seconds) + 1);\r\n        }\r\n        if (parseInt(seconds) >= 59) {\r\n          setSeconds(parseInt(seconds - 59));\r\n          setMinutes(parseInt(minutes) + 1);\r\n          if (parseInt(minutes) >= 59) {\r\n            setMinutes(parseInt(minutes - 59));\r\n            setHours(parseInt(hours) + 1);\r\n          }\r\n        }\r\n      }\r\n      , 1000);\r\n      return () => clearInterval(countdown);\r\n    }\r\n  }, [hours, minutes, seconds])\r\n  return (\r\n    <Grid className ='memberstate'>\r\n      {\r\n        exState?\r\n          <GiWeightLiftingUp/>\r\n          :\r\n          <GiWeightLiftingDown/>\r\n      }\r\n      <Grid>\r\n        {user_name}\r\n      </Grid>\r\n      {\r\n        exState?\r\n        <Grid>\r\n          {hours}:{minutes < 10 ? `0${minutes}` : minutes}:{seconds < 10 ? `0${seconds}` : seconds}\r\n        </Grid>\r\n        :\r\n        ''\r\n      }\r\n    </Grid>\r\n  )\r\n}\r\n\r\nexport default Member;","import React, { useEffect, useState } from 'react';\r\nimport {Grid} from '@material-ui/core';\r\nimport { GiWeightLiftingDown, GiWeightLiftingUp } from \"react-icons/gi\";\r\n\r\nimport Member from './Member';\r\n\r\nconst GroupMember = (props) => {\r\n\r\n    const list = props.groupmembers.map((groupmembers, index) => {  \r\n            return (\r\n                <Member\r\n                    user_id={groupmembers.user_id}\r\n                    user_name={groupmembers.user_name}\r\n                    start_time={groupmembers.exercise_start_time}\r\n                    exercise_state={groupmembers.exercise_state}\r\n                    key={index}\r\n                />\r\n            )\r\n        });\r\n        \r\n    \r\n    return (\r\n        <Grid>\r\n            {list}\r\n        </Grid>\r\n        )\r\n};                \r\nexport default GroupMember;","import { UnityContext } from 'react-unity-webgl';\r\nexport const unityContext = new UnityContext({\r\n    loaderUrl: 'static/Build/help.loader.js',\r\n    dataUrl: 'static/Build/help.data',\r\n    frameworkUrl: 'static/Build/help.framework.js',\r\n    codeUrl: 'static/Build/help.wasm'\r\n});\r\n","import React, { useEffect } from 'react';\r\nimport { Grid } from '@material-ui/core';\r\nimport Unity, { UnityContext } from 'react-unity-webgl';\r\nimport { unityContext } from '../../test';\r\n\r\nconst Char = (props) => {\r\n    useEffect(() => {\r\n        unityContext.on('canvas', (canvas) => {\r\n            if (canvas !== null) {\r\n                canvas.width = 300;\r\n                canvas.height = 400;\r\n                canvas.getContext('webgl');\r\n            }\r\n            props.SetChar();\r\n        });\r\n    }, []);\r\n    return (\r\n        <Grid className ='drawchar'>\r\n             <Unity \r\n                unityContext={unityContext}\r\n                matchWebGLToCanvasSize={false}\r\n            /> \r\n        </Grid>\r\n    )\r\n};\r\n\r\nexport default Char;","import React, { useState } from 'react';\r\nimport { Grid,NativeSelect,Button } from '@material-ui/core';\r\n\r\nconst Timer = (props) => {\r\n    return (\r\n        <Grid className='Timer'>\r\n            <div>{props.time.h < 10 ? `0${props.time.h}` : props.time.h}:{props.time.m < 10 ? `0${props.time.m}` : props.time.m}:{props.time.s < 10 ? `0${props.time.s}` : props.time.s}</div>\r\n            <NativeSelect\r\n                onChange={props.exerciseChange}\r\n                className='ExerciseSelect'>\r\n                    <option aria-label=\"\" value=\"\" >운동부위</option>\r\n                    <option value=\"1\">등</option>\r\n                    <option value=\"2\">가슴</option>\r\n                    <option value=\"3\">어깨</option>\r\n                    <option value=\"4\">복근</option>\r\n                    <option value=\"5\">팔</option>\r\n                    <option value=\"6\">다리</option>\r\n            </NativeSelect>\r\n            <Grid className ='selecterror'>{props.message}</Grid>\r\n            <Grid className ='btnform'>\r\n                {(props.status===0)?\r\n                    <Grid><Button className ='btn' onClick={props.start}>시작</Button></Grid>:\"\"}\r\n                {(props.status===1)?\r\n                    <Grid><Button className ='btn' onClick={props.stop}>정지</Button></Grid>:\"\"}\r\n            </Grid>\r\n        </Grid>\r\n    )\r\n};\r\n\r\nexport default Timer;","import React from 'react';\r\n\r\nimport { Grid } from '@material-ui/core';\r\n\r\nconst ElementLeft = (props) => {\r\n  return(\r\n    <Grid item xs={6} className='element-left'>\r\n      {props.content}\r\n    </Grid>\r\n  )\r\n}\r\n\r\nexport default ElementLeft;","import React from 'react';\r\n\r\nimport { Grid } from '@material-ui/core';\r\n\r\nconst ElementRight = (props) => {\r\n  return(\r\n    <Grid item xs={6} className='element-right'>\r\n      {props.content}\r\n    </Grid>\r\n  )\r\n}\r\n\r\nexport default ElementRight;","import React from 'react';\r\n\r\nimport { Paper, Grid, Modal } from '@material-ui/core';\r\n\r\nimport { ElementLeft, ElementRight } from '../ui';\r\n\r\nconst UserInfoModal = (props) => {\r\n  return (\r\n    <Modal\r\n      open={props.open}\r\n      onClose={props.handleClose}\r\n      aria-labelledby='user-exercise-info-title'\r\n      aria-describedby='user-exercise-info'\r\n    >\r\n      <Paper className='modal'>\r\n        <Grid container>\r\n          <ElementLeft \r\n            content='팔 경험치 :'\r\n          />\r\n          <ElementRight \r\n            content={props.data.arm_exp}\r\n          />\r\n          <ElementLeft\r\n            content='가슴 경험치 :'\r\n          />\r\n          <ElementRight\r\n            content={props.data.chest_exp}\r\n          />\r\n          <ElementLeft\r\n            content='등 경험치 :'\r\n          />\r\n          <ElementRight\r\n            content={props.data.back_exp}\r\n          />\r\n          <ElementLeft\r\n            content='어깨 경험치 :'\r\n          />\r\n          <ElementRight\r\n            content={props.data.shoulder_exp}\r\n          />\r\n          <ElementLeft\r\n            content='복근 경험치 :'\r\n          />\r\n          <ElementRight\r\n            content={props.data.belly_exp}\r\n          />\r\n          <ElementLeft\r\n            content='하체 경험치 :'\r\n          />\r\n          <ElementRight\r\n            content={props.data.leg_exp}\r\n          />\r\n        </Grid>\r\n      </Paper>\r\n    </Modal>\r\n  )\r\n}\r\n\r\nexport default UserInfoModal;","import React from 'react';\r\nimport { Grid, Button, Divider } from '@material-ui/core';\r\n\r\nimport {BoardListView} from '../ui';\r\nimport useStore from '../useStore';\r\nconst BoardList = (props) => {\r\n    return (\r\n        <Grid className='boardlist'>\r\n            <input type='text' \r\n                className='boardmake' \r\n                placeholder={'게시판 이름'} \r\n                onChange={props.onboardnameChange}></input>\r\n            <Button className='makebtn' onClick ={props.makeboard}>게시판 생성</Button>\r\n            <Divider/>\r\n            <BoardListView boardlist={props.boardlist} onClickboard={props.onClickboard}/>\r\n        </Grid>\r\n    )\r\n};\r\n\r\nexport default BoardList;","import React from 'react';\r\nimport { Grid} from '@material-ui/core';\r\nimport { Link} from 'react-router-dom';\r\nconst BoardListView = (props) => {\r\n    const list = props.boardlist.map(\r\n        (element, index) =>(<Grid key={index}>\r\n                <li key={element.board_id}>\r\n                    <a href = 'board' onClick = {function(ev){\r\n                        ev.preventDefault();\r\n                        props.onClickboard(element.board_id,element.board_name);\r\n                   }}>\r\n                        {element.board_name} \r\n                    </a>\r\n                </li>\r\n            </Grid>\r\n        )\r\n    );\r\n\r\n    return (\r\n        <Grid className = 'boardlistform'>\r\n            {list}\r\n        </Grid>\r\n        )\r\n};                \r\nexport default BoardListView;","import React from 'react';\r\nimport { Grid, Divider } from '@material-ui/core';\r\nconst PostList = (props) => {\r\n    const list = props.postlist.map(\r\n        (element, index) =>(<Grid className='postelement' key={index}>\r\n            <li className='postelementlist' key={element.board_id}>\r\n                <a className='postelementa' href = 'board' onClick = {function(ev){\r\n                    ev.preventDefault();\r\n                    props.onpost(element.post_id);\r\n            }}>\r\n                <Grid className='postitems'>\r\n                    <Grid className ='postitemtitle'>{element.post_title}</Grid>\r\n                    <Grid className ='postitemuser'>작성자:{element.user_id}  /  게시일:{element.created_at.substring(0,10)}</Grid>\r\n                </Grid>\r\n                </a>\r\n            </li>\r\n            <Divider/>\r\n        </Grid>\r\n        )\r\n    );\r\n\r\n    return (\r\n        <Grid className = 'boardlistform'>\r\n            {list}\r\n        </Grid>\r\n        )\r\n};                \r\nexport default PostList;","import React, { useState } from 'react';\r\nimport { useHistory } from \"react-router-dom\";\r\nimport LoginView from './LoginView';\r\nimport { HeaderController } from '../ui';\r\n\r\nconst LoginController = ({ viewModel }) => {\r\n    const [id, setId] = useState('');\r\n    const [pw, setPw] = useState('');\r\n    const history = useHistory();\r\n    const onIdChange = (e) => {\r\n        setId(e.target.value);\r\n    }\r\n    const onPwChange = (e) => {\r\n        setPw(e.target.value);\r\n    }\r\n\r\n    const login = async () => {\r\n \r\n        const connect = await viewModel.login(id, pw);\r\n        const status = connect?.status;\r\n        if (status === 200) {\r\n            history.replace('/');\r\n        } else if (status === 400 || status === 401) {\r\n            setPw('');\r\n            alert('아이디 또는 비밀번호가 잘못되었습니다.')\r\n        } else {\r\n            setPw('');\r\n            alert('내부 서버 오류입니다.');\r\n        }\r\n    }\r\n    return (\r\n        <>\r\n        <HeaderController\r\n            header={'로그인'}\r\n        />\r\n        <LoginView \r\n            onIdChange={onIdChange}\r\n            onPwChange={onPwChange}\r\n            login={login}\r\n        />\r\n        </>\r\n    );\r\n};\r\n\r\nexport default LoginController;","import React from 'react';\r\nimport { Grid, Divider,NativeSelect } from '@material-ui/core';\r\n\r\nconst SignupView = (props) => {\r\n    return (\r\n        <Grid container direction='column'>\r\n            <Grid className='contents'>\r\n                <Grid className='logo'>HELP</Grid>\r\n                <Grid className='join_title'>아이디</Grid>\r\n                <input\r\n                    type='text'\r\n                    className='login' \r\n                    placeholder={'아이디'}\r\n                    onChange={props.onIdChange}\r\n                />\r\n                <Grid className='errorm'>{props.message1}</Grid>\r\n                <Grid className='join_title'>이메일</Grid>\r\n                    <input\r\n                        type=\"email\"\r\n                        className='login'\r\n                        placeholder={'email'}\r\n                        onChange={props.onEmailChange}\r\n                    />\r\n                <Grid className='errorm'>{props.message7}</Grid>\r\n                <Grid className='join_title'>비밀번호</Grid>\r\n                <input\r\n                    type='password'\r\n                    className='login'\r\n                    placeholder={'비밀번호'}\r\n                    onChange={props.onPwChange}\r\n                />\r\n                <Grid className='errorm'>{props.message2}</Grid>\r\n                <Grid className='join_title'>비밀번호 확인</Grid>\r\n                <input\r\n                    type='password'\r\n                    className='login'\r\n                    placeholder={'비밀번호확인'}\r\n                    onChange={props.onPwCheChange}\r\n                />\r\n                <Grid className='errorm'>{props.message3}</Grid>\r\n                <Grid className='join_title'>이름</Grid>\r\n                <input\r\n                    type='text'\r\n                    className='login'\r\n                    placeholder={'이름'}\r\n                    onChange={props.onNameChange}\r\n                />\r\n                <Grid className='errorm'>{props.message4}</Grid>\r\n                <Grid className='join_title'>성별</Grid>\r\n                <NativeSelect\r\n                    onChange={props.genderChange}\r\n                    className='GenderSelect'>\r\n                    <option aria-label=\"\" value=\"\" >성별</option>\r\n                    <option value=\"M\">남자</option>\r\n                    <option value=\"F\">여자</option>\r\n                </NativeSelect>\r\n                <Grid className='errorm'>{props.message5}</Grid>\r\n                <Grid className='join_title'>힌트</Grid>\r\n                    <NativeSelect\r\n                        onChange={props.questChange}\r\n                        className='GenderSelect'>\r\n                        <option aria-label=\"\" value=\"\" >질문</option>\r\n                        <option value=\"1\">당신의 아버지 성함은?</option>\r\n                        <option value=\"2\">당신의 어머니 성함은?</option>\r\n                        <option value=\"3\">당신이 사는 지역은?</option>\r\n                        <option value=\"4\">당신의 모교 이름은?</option>\r\n                    </NativeSelect>\r\n                    <Grid className='errorm'>{props.message6}</Grid>\r\n                    <input\r\n                        type=\"text\"\r\n                        className='login'\r\n                        placeholder={'힌트대답'}\r\n                        onChange={props.onHintChange}\r\n                    />\r\n                    <Grid className='errorm'>{props.message8}</Grid>\r\n                <button type='button' className='loginbtn' onClick={props.Signup}>가입하기</button>\r\n                <Divider />\r\n            </Grid>\r\n        </Grid>\r\n    )    \r\n};\r\n\r\nexport default SignupView;","import React, { useState } from 'react';\r\nimport { useHistory } from \"react-router-dom\";\r\nimport SignupView from './SignUpView';\r\nimport { HeaderController } from '../ui';\r\n\r\nconst SignupController = ({ viewModel }) => {\r\n    const [id, setId] = useState('');\r\n    const [email, setEmail] = useState('');\r\n    const [pw, setPw] = useState('');\r\n    const [cpw, setCpw] = useState('');\r\n    const [name, setName] = useState('');\r\n    const [gender, setGender] = useState('');\r\n    const [quest, setQuest] = useState('');\r\n    const [hint, setHint] = useState('');\r\n    const [message1,setMessage1] = useState('');\r\n    const [message2,setMessage2] = useState('');\r\n    const [message3,setMessage3] = useState('');\r\n    const [message4,setMessage4] = useState('');\r\n    const [message5,setMessage5] = useState('');\r\n    const [message6,setMessage6] = useState('');\r\n    const [message7,setMessage7] = useState('');\r\n    const [message8,setMessage8] = useState('');\r\n    const history = useHistory();\r\n    const checkAlphaNum = (str) => {\r\n        const regexp = /^[a-zA-Z0-9]*$/;\r\n        if(regexp.test(str)){\r\n            return true;\r\n        } else {\r\n            return false;\r\n        }\r\n    }\r\n    function CheckEmail(str){\r\n         var reg_email = /^([0-9a-zA-Z_\\.-]+)@([0-9a-zA-Z_-]+)(\\.[0-9a-zA-Z_-]+){1,2}$/;\r\n        if(!reg_email.test(str)){\r\n            return false;\r\n        }\r\n        else{\r\n            return true;\r\n        }\r\n    } \r\n    const onIdChange = (e) => {    \r\n        if(e.target.value==='')\r\n            setMessage1('아이디를 입력해주세요.');\r\n        else if (!checkAlphaNum(e.target.value)) {\r\n            setId(e.target.value);\r\n            setMessage1('아이디는 알파벳 소문자, 대문자, 숫자만 가능합니다.');\r\n        } else {\r\n            setId(e.target.value);\r\n            setMessage1('');\r\n        }\r\n    };\r\n    const onEmailChange = (e) => {\r\n        if(e.target.value==='')\r\n            setMessage7('e-mail을 입력해주세요.');\r\n        else{\r\n            if(CheckEmail(e.target.value)){\r\n                setMessage7('');\r\n                setEmail(e.target.value);}\r\n            else{\r\n                setMessage7('e-mail형식에 맞게 적어주세요.');\r\n            }\r\n        }    \r\n    }\r\n    const onPwChange = (e) => {\r\n        if(e.target.value==='')\r\n            setMessage2('비밀번호를 입력해주세요.');\r\n        else{\r\n            setMessage2('');\r\n            setPw(e.target.value);}\r\n    }\r\n    const onPwCheChange = (e) => {\r\n        if(e.target.value==='')\r\n            setMessage3('비밀번호를 입력해주세요.');\r\n        else if(e.target.value!==pw)\r\n            setMessage3('비밀번호가 일치하지 않습니다.');\r\n        else{\r\n            setMessage3('');\r\n            setCpw(e.target.value);\r\n        }\r\n    }\r\n    const onNameChange = (e) => {\r\n        if(e.target.value==='')\r\n            setMessage4('이름을 입력해주세요.');\r\n        else{\r\n            setMessage4('');\r\n            setName(e.target.value);}\r\n    }\r\n    const genderChange = (e) => {\r\n        if(e.target.value==='')\r\n            setMessage5('성별을 선택해주세요.');\r\n        else{\r\n            setMessage5('');\r\n            setGender(e.target.value);}\r\n    }\r\n    const questChange = (e) => {\r\n        if(e.target.value==='')\r\n            setMessage6('질문을 선택해주세요.');\r\n        else{\r\n            setMessage6('');\r\n            setMessage8('');\r\n            setQuest(e.target.value);}\r\n    }\r\n    const onHintChange = (e) => {\r\n        if(message6 !==''){\r\n            setMessage8('질문을 먼저 선택해주세요.');\r\n        }else if(e.target.value===''&& message6 ===''){\r\n            setMessage8('질문의 대답을 적어주세요.');\r\n        }\r\n        else{\r\n            setMessage8('');\r\n            setHint(e.target.value);}\r\n    }\r\n\r\n    const Signup = async () => {\r\n        if(id === ''|| email === ''|| pw === ''|| name === ''|| gender === ''|| quest === ''|| hint === ''){\r\n            alert('모든 정보를 입력해주세요.');\r\n        } else if (cpw === '') {\r\n            alert('비밀번호가 일치하지 않습니다.');\r\n        } else if (!checkAlphaNum(id)) {\r\n            alert('아이디는 알파벳 소문자, 대문자, 숫자만 가능합니다.');\r\n            return;\r\n        } else {\r\n            const connect = await viewModel.signUp(id, pw, name, gender, email, quest, hint);\r\n            const status = connect?.status;\r\n\r\n            if (status === 201) {\r\n                alert('가입되었습니다.');\r\n                history.replace('/login');\r\n            } else if (status === 400) {\r\n                alert('중복된 아이디입니다.');\r\n            } else {\r\n                alert('내부 서버 오류입니다.');\r\n            }\r\n        }\r\n\r\n    }\r\n    \r\n    return (\r\n        <>\r\n            <HeaderController header='회원가입' />\r\n            <SignupView \r\n                onIdChange={onIdChange}\r\n                onEmailChange={onEmailChange}\r\n                onPwChange={onPwChange}\r\n                onPwCheChange={onPwCheChange}\r\n                onNameChange={onNameChange}\r\n                genderChange={genderChange}\r\n                questChange={questChange}\r\n                onHintChange={onHintChange}\r\n                message1={message1}\r\n                message2={message2}\r\n                message3={message3}\r\n                message4={message4}\r\n                message5={message5}\r\n                message6={message6}\r\n                message7={message7}\r\n                message8={message8}\r\n                Signup={Signup}\r\n            />\r\n        </>\r\n    );\r\n};\r\n\r\nexport default SignupController;","import React from 'react';\r\nimport { Grid } from '@material-ui/core';\r\n\r\n\r\nimport { Timer, Char} from '../ui';\r\n\r\nconst HomeView = (props) => {\r\n    return (\r\n        <Grid container direction='column'>\r\n            <Grid className='contents'>\r\n                <Grid className ='IdView'>\r\n                    <Char SetChar={props.SetChar}/>\r\n                    <Timer\r\n                        time={props.time}\r\n                        message={props.message}\r\n                        status={props.status}\r\n                        start={props.start}\r\n                        run={props.run}\r\n                        stop={props.stop}\r\n                        exerciseChange={props.exerciseChange}/>\r\n                </Grid>\r\n            </Grid>\r\n        </Grid>\r\n    )    \r\n};\r\n\r\nexport default HomeView;","import React, { useState,useEffect } from 'react';\r\n\r\nimport { HeaderController  } from '../ui';\r\nimport HomeView from './HomeView';\r\nimport { unityContext } from '../../test';\r\nimport useStore from '../useStore';\r\nimport { useHistory } from 'react-router-dom';\r\n\r\n\r\nconst HomeController = ({ viewModel }) => {\r\n    const { Auth } = useStore();\r\n    const [time, setTime] = useState({h:0,m:0,s:0});\r\n    const [interv, setInterv] = useState();\r\n    const [status, setStatus] = useState(0);\r\n    const [message, setmessage] = useState('');\r\n    const [expart, setExpart] = useState('');\r\n    const history = useHistory();\r\n\r\n    useEffect(() => {\r\n    }, [])\r\n    let today = new Date();\r\n        const start = () => {\r\n            if(Auth.isLogged){\r\n                if(expart===''){\r\n                    setmessage('운동부위를 선택해주세요.');\r\n                }\r\n                else{\r\n                    if(message ===''){\r\n                        run();\r\n                        setStatus(1);\r\n                        const now = today.getHours() * 3600 + today.getMinutes() * 60 + today.getSeconds();\r\n                        setInterv(setInterval(run,1000));\r\n                        viewModel.exercise(expart, now, 1);\r\n                    }\r\n                }\r\n            }\r\n            else {\r\n                alert('로그인을 해야 사용가능한 기능입니다.');\r\n                history.replace('/login');\r\n            }\r\n        };\r\n    var updatedH = time.h, updatedM = time.m, updatedS = time.s;\r\n    const run=()=>{\r\n        if(updatedM===59){\r\n            updatedH++;\r\n            updatedM=0;\r\n            \r\n        }\r\n        if(updatedS===59){\r\n            updatedM++;\r\n            updatedS=-1;\r\n        }\r\n        updatedS++;\r\n        return setTime({h:updatedH,m:updatedM,s:updatedS});\r\n    };\r\n    const stop=()=>{\r\n        if(message===''){\r\n            clearInterval(interv);\r\n            const times = time.h * 3600 + time.m * 60 + time.s;\r\n            levelChange(times);\r\n            setTime({h:0,m:0,s:0});\r\n            setStatus(0);\r\n            viewModel.exercise(expart, times, 2);\r\n            if (expart === '1')\r\n                Auth.data.back_exp += times;\r\n            else if (expart === '2')\r\n                Auth.data.chest_exp += times;\r\n            else if (expart === '3')\r\n                Auth.data.shoulder_exp += times;\r\n            else if (expart === '4')\r\n                Auth.data.belly_exp += times;\r\n            else if (expart === '5')\r\n                Auth.data.arm_exp += times;\r\n            else if (expart === '6')\r\n                Auth.data.leg_exp += times;\r\n        }\r\n    }\r\n\r\n    const levelChange = (times) => {   \r\n        let Headandchest_level = (expart===\"2\")?levelcheck1(Auth.data.chest_exp+times):levelcheck1(Auth.data.chest_exp);\r\n        let Back_level = (expart===\"1\")? levelcheck2(Auth.data.back_exp + times):levelcheck2(Auth.data.back_exp);\r\n        let Arm_level = (expart===\"5\")?levelcheck1(Auth.data.arm_exp + times):levelcheck1(Auth.data.arm_exp);\r\n        let Lowerbody_level = (expart===\"6\")?levelcheck2(Auth.data.leg_exp + times):levelcheck2(Auth.data.leg_exp);\r\n        let Abs_level = (expart===\"4\")?levelcheck1(Auth.data.belly_exp + times):levelcheck1(Auth.data.belly_exp);\r\n        let Shoulder_level = (expart===\"3\")?levelcheck1(Auth.data.shoulder_exp + times):levelcheck1(Auth.data.shoulder_exp);\r\n        let Gender = (Auth.data.gender==='M')?0:1;\r\n        //가슴 배 어깨 팔 ->6 //하체 등 ->4\r\n        unityContext.send('BigMan', 'Headandchest_LevelChange', Headandchest_level);\r\n        unityContext.send('BigMan', 'Back_LevelChange', Back_level);\r\n        unityContext.send('BigMan', 'Arm_LevelChange', Arm_level);\r\n        unityContext.send('BigMan', 'Lowerbody_LevelChange', Lowerbody_level);\r\n        unityContext.send('BigMan', 'Abs_LevelChange', Abs_level);\r\n        unityContext.send('BigMan', 'Shoulder_LevelChange', Shoulder_level);\r\n        unityContext.send('BigMan', 'GenderChange', Gender);\r\n    }\r\n    const levelcheck1 = (parttime) =>{//전부 초단위 exp단위도 sec\r\n        if(parttime<4500){\r\n            return 1;\r\n        }else if(4500<=parttime&&parttime<45000){\r\n            return 2;\r\n        }else if(45000<=parttime&&parttime<125000){\r\n            return 3;\r\n        }else if(125000<=parttime&&parttime<275000){\r\n            return 4;\r\n        }else if(275000<=parttime&&parttime<815000){\r\n            return 5;\r\n        }else if(815000<=parttime){\r\n            return 6;\r\n        }\r\n\r\n    }\r\n    const levelcheck2 = (parttime) =>{//전부 초단위 exp단위도 sec\r\n        if(parttime<4500){\r\n            return 1;\r\n        }else if(4500<=parttime&&parttime<275000){\r\n            return 2;\r\n        }else if(275000<=parttime&&parttime<815000){\r\n            return 3;\r\n        }else if(815000<=parttime){\r\n            return 4;\r\n        }\r\n\r\n    }\r\n////////////////////////////////////////////////////////////////////\r\n    const SetChar = () => {\r\n        let Headandchest_level=1;\r\n        let Back_level=1;\r\n        let Arm_level=1;\r\n        let Lowerbody_level=1;\r\n        let Abs_level=1;\r\n        let Shoulder_level=1;\r\n        let Gender=0;\r\n        if(Auth.islogged){\r\n            if (Auth.data.gender==='M'){ //0 남자 1여자\r\n                Gender = 0;\r\n            }else {\r\n                Gender = 1;\r\n            }\r\n        }\r\n        unityContext.send('BigMan', 'Headandchest_LevelChange', Headandchest_level);\r\n        unityContext.send('BigMan', 'Back_LevelChange', Back_level);\r\n        unityContext.send('BigMan', 'Arm_LevelChange', Arm_level);\r\n        unityContext.send('BigMan', 'Lowerbody_LevelChange', Lowerbody_level);\r\n        unityContext.send('BigMan', 'Abs_LevelChange', Abs_level);\r\n        unityContext.send('BigMan', 'Shoulder_LevelChange', Shoulder_level);\r\n        unityContext.send('BigMan', 'GenderChange', Gender);\r\n    }\r\n////////////////////////////////////////////////////////////////////\r\n\r\n    const exerciseChange = (e) =>{\r\n        if(status===0){\r\n            if(e.target.value==='')\r\n                setmessage('운동부위를 선택해주세요.');\r\n            else{\r\n                setmessage('');\r\n                setExpart(e.target.value);\r\n            }\r\n        }\r\n        else{\r\n            if(expart===e.target.value){\r\n                setmessage('');\r\n            }\r\n            else{\r\n                setmessage('운동중 운동부위 변경은 불가 합니다.');\r\n            }\r\n        }\r\n    }\r\n    return (\r\n        <>\r\n        <HeaderController header='캐릭터' />\r\n        <HomeView\r\n            SetChar={SetChar}\r\n            time={time}\r\n            message={message}\r\n            status={status}\r\n            start={start}\r\n            run={run}\r\n            stop={stop}\r\n            exerciseChange={exerciseChange}\r\n        />\r\n        </>\r\n    );\r\n};\r\n\r\nexport default HomeController;","import React from 'react';\r\nimport { Grid , Button} from '@material-ui/core';\r\nimport { IoPodiumOutline,IoCalendarOutline } from \"react-icons/io5\";\r\nimport { BsPersonPlus } from \"react-icons/bs\";\r\n\r\nimport { GroupMember } from '../ui';\r\nimport { useHistory } from 'react-router-dom';\r\n\r\nconst GroupView = (props) => {\r\n    const history = useHistory();\r\n    return (\r\n        <Grid container direction='column'>\r\n            <Grid className='group'>\r\n                <Grid className='grouplogo'><Grid className='groupname'>{props.groupname}</Grid></Grid>\r\n                \r\n                <Grid className = 'groupmembernumber'>멤버<Grid className = 'groupmember'>{props.groupmember}</Grid>명</Grid>\r\n                <Grid className = 'groupkategorie'>\r\n                    {/*<Grid className = 'grouprank'>Rank.1</Grid>\r\n                    <Grid className='groupicon'><Button className='groupiconbtn'><IoPodiumOutline/><Grid>Rank</Grid></Button></Grid>\r\n                    <Grid className='groupicon'><Button className='groupiconbtn'><IoCalendarOutline/><Grid>Calendar</Grid></Button></Grid>*/}\r\n                    {(props.ismember===false)?\r\n                    <Grid className='groupicon'><Button className='groupiconbtn' onClick={props.join}><BsPersonPlus/><Grid>가입</Grid></Button></Grid>:\r\n                    <Grid className='groupicon'><Button className='groupiconbtn' onClick={props.disjoin}><BsPersonPlus/><Grid>탈퇴</Grid></Button></Grid>}\r\n                </Grid>\r\n                <Grid className ='doing'>\r\n                    <Grid>지금운동중인 멤버 수<Grid className = 'groupmember'>{props.Exercisemember}</Grid></Grid>\r\n                    <GroupMember groupmembers={props.groupmembers}></GroupMember>\r\n                </Grid>\r\n            </Grid>\r\n\r\n            \r\n            \r\n        </Grid>\r\n    )    \r\n};\r\n\r\nexport default GroupView;","import React, { useState,useEffect, useRef } from 'react';\r\nimport { GiRun } from 'react-icons/gi';\r\n\r\nimport GroupView from './GroupView';\r\nimport { HeaderController } from '../ui';\r\nimport useStore from '../useStore';\r\nimport { useHistory } from 'react-router-dom';\r\n\r\nconst GroupController = ({ viewModel }) => {\r\n    const mounted = useRef(false);\r\n    const [memberlist,setMemberlist] = useState([]);\r\n    const [studydetail,setStudydetail] = useState([]);\r\n    const [groupname,setgroupname] = useState('');\r\n    const [groupmember,setgroupmember] = useState('');\r\n    const [Exercisemember,setExercisemember] = useState('');\r\n    const [notice,setnotice] = useState('notice');\r\n    const { Auth } = useStore();\r\n    const id = Auth.isLogged ? Auth.data.user_id:'';\r\n    const [ismember,setIsmember] = useState(false);\r\n    const history = useHistory();\r\n    const address = (history.location.pathname);\r\n    const study_id = address.replace(/[^0-9]/g,'');\r\n\r\n    const getmember = async () => {\r\n        const test = await viewModel.member(study_id);\r\n        const status = test?.status;\r\n        setMemberlist(test.data);\r\n        if(test.data.find(element => element.user_id === id)===undefined){\r\n            setIsmember(false);\r\n        }else{\r\n            setIsmember(true);\r\n        }\r\n        const exercise = test.data.filter(element => true === element.exercise_state).length;\r\n        setExercisemember(exercise);\r\n        \r\n        if (status === 200) {\r\n            \r\n        }\r\n        else {\r\n            alert('내부 서버 오류입니다.');\r\n        }\r\n    }\r\n    const getstudy_detail = async () => {\r\n        const test = await viewModel.study_detail(study_id);\r\n        const status = test?.status;\r\n        setStudydetail(test.data);\r\n        setgroupname(test.data.study_name);\r\n        setgroupmember(test.data.current_user_count);\r\n        \r\n        if (status === 200) {\r\n            \r\n        }\r\n        else {\r\n            alert('내부 서버 오류입니다.');\r\n        }\r\n    }\r\n\r\n    useEffect(() => {\r\n        getstudy_detail();\r\n        getmember();\r\n    },[]);\r\n      \r\n        \r\n        const join=()=>{\r\n            if(Auth.isLogged === false){ history.replace('/login');}\r\n            else{\r\n                if(ismember===false){\r\n                    {\r\n                        if(studydetail.current_user_count===studydetail.capacity){\r\n                            alert('더 이상 해당그룹에 가입할 수 없습니다.');\r\n                        }else{\r\n                            try {\r\n                                viewModel.join(id,study_id);\r\n                                alert('가입되었습니다.');\r\n                                setnotice('가입됨');\r\n                                setIsmember(true);\r\n                                getstudy_detail();\r\n                                getmember();\r\n                            } catch (e) {\r\n\r\n                            }\r\n                        }\r\n                    }\r\n                }\r\n                else{\r\n                    alert('이미 가입된 곳 입니다.');\r\n                }\r\n            }  \r\n        }\r\n        const disjoin=()=>{\r\n            if(Auth.isLogged === false){ history.replace('/login');}\r\n            else{\r\n                if(ismember===true){\r\n                    if(studydetail.current_user_count===1){\r\n                        viewModel.disjoin(id,study_id);\r\n                        alert('탈퇴되었습니다.');\r\n                        history.replace('/grouplist');\r\n                    }else{\r\n                        try {\r\n                            viewModel.disjoin(id,study_id);\r\n                            alert('탈퇴되었습니다.');\r\n                            setnotice('탈퇴됨');\r\n                            setIsmember(false);\r\n                            getstudy_detail();\r\n                            getmember();\r\n                        } catch (e) {\r\n                            \r\n                        }\r\n                    }\r\n                }\r\n                else{\r\n                    alert('해당 스터디의 맴버가 아닙니다.');\r\n                }\r\n            }\r\n        }\r\n        \r\n       \r\n    return (\r\n        <>\r\n        <HeaderController header={'그룹'}/>\r\n        < GroupView \r\n            groupname={groupname}\r\n            groupmember={groupmember}\r\n            Exercisemember={Exercisemember}\r\n            notice={notice}\r\n            groupmembers = {memberlist}\r\n            ismember = {ismember}\r\n            join = {join}\r\n            disjoin = {disjoin}\r\n        />\r\n        </>\r\n    );\r\n};\r\n\r\nexport default GroupController;","import React from 'react';\r\nimport { Grid ,Link} from '@material-ui/core';\r\n\r\nimport { IoSearch } from \"react-icons/io5\";\r\n\r\nimport Fab from '@material-ui/core/Fab';\r\nimport AddIcon from '@material-ui/icons/Add';\r\n\r\nimport { GroupForm  } from '../ui';\r\n\r\nconst GrouplistView = (props) => {\r\n    return (\r\n        <Grid container direction='column'>\r\n            <Grid className ='grouplist'>\r\n                {/*<Grid className ='searchform'>\r\n                    <IoSearch/>\r\n                    <input \r\n                    type='text'\r\n                    className = 'searchgroup'\r\n                    placeholder={'검색'}\r\n                    onChange={props.onsearchChange}\r\n                    />\r\n                    <button type='button' onClick={props.onsearchClick}>Search</button>\r\n    </Grid>*/}\r\n                    <GroupForm groupdata = {props.groupdata}/>\r\n                <Fab className = 'makegroupbtn' aria-label=\"add\" onClick = {props.make}>\r\n                    <AddIcon />\r\n                </Fab>\r\n            </Grid>\r\n        </Grid>\r\n    )    \r\n};\r\n\r\nexport default GrouplistView;","import React, { useState,useEffect } from 'react';\r\n\r\nimport { HeaderController } from '../ui';\r\nimport GrouplistView from './GroupListView';\r\nimport { useHistory } from 'react-router-dom';\r\nimport useStore from '../useStore';\r\n\r\n\r\nconst GrouplistController = ({ viewModel }) => {\r\n    \r\n    const [Search,setSearch] = useState('');\r\n    const [list,setList] = useState([]);\r\n    const { Auth } = useStore();\r\n    const history = useHistory();\r\n\r\n    const getlist = async () => {\r\n        const test = await viewModel.list();\r\n        const status = test?.status;\r\n        setList(test.data);\r\n        if (status === 200) {\r\n            \r\n        }\r\n        else {\r\n            alert('내부 서버 오류입니다.');\r\n        }\r\n    }\r\n    useEffect(() => {\r\n        getlist();\r\n      },[]);\r\n\r\n\r\n    const make = () =>{\r\n        if(Auth.isLogged){\r\n            history.replace('groupmake');}\r\n        else{\r\n            alert('그룹을 생성하려면 로그인이 필요합니다.');\r\n            history.replace('login');\r\n        }\r\n            \r\n    }\r\n    return (\r\n        <>\r\n            <HeaderController header='그룹 목록' />\r\n            <GrouplistView \r\n                make={make}\r\n                groupdata = {list}\r\n            />\r\n        </>\r\n    );\r\n};\r\n\r\nexport default GrouplistController;","import React from 'react';\r\nimport { Grid, Button } from '@material-ui/core';\r\nimport { withStyles } from '@material-ui/core/styles'\r\n\r\nimport { ElementLeft, ElementRight, UserInfoModal } from '../ui';\r\n\r\nconst ColorButton = withStyles({\r\n    root: {\r\n        backgroundColor: '#8AD3FC',\r\n        margin: '20px 0',\r\n        '&:hover': {\r\n            backgroundColor: '#30B0FD'\r\n        }\r\n    }\r\n})(Button);\r\nconst UserInfoView = (props) => {\r\n    return(\r\n        <Grid container direction='column'>\r\n            <Grid className='contents'>\r\n                <Grid className='logo'>HELP</Grid>\r\n                    <Grid container>\r\n                        <ElementLeft\r\n                            content='아이디 :'\r\n                        />\r\n                        <ElementRight\r\n                            content={props.data.user_id}\r\n                        />\r\n                        <ElementLeft\r\n                            content='이름 :'\r\n                        />\r\n                        <ElementRight\r\n                            content={props.data.user_name}\r\n                        />\r\n                        <Grid item xs={12}>\r\n                            <ColorButton\r\n                                variant='contained'\r\n                                className='element-center'\r\n                                onClick={props.handleOpen}\r\n                                color='primary'\r\n                            >\r\n                                내 운동 정보\r\n                            </ColorButton>\r\n                        </Grid>\r\n                        <UserInfoModal\r\n                            open={props.open}\r\n                            handleClose={props.handleClose}\r\n                            data={props.data}\r\n                        />\r\n                        {(props.state===1)?\r\n                        <Grid item xs={12}>\r\n                            <ColorButton\r\n                                variant='contained'\r\n                                className='element-center'\r\n                                onClick={props.pwChange}\r\n                                color='primary'\r\n                            >\r\n                                비밀번호 변경\r\n                            </ColorButton>\r\n                        </Grid>:''}\r\n                        {(props.state===2)?\r\n                            <><ElementLeft\r\n                                content='변경비밀번호 :'\r\n                            />\r\n                            <ElementRight\r\n                                content={\r\n                                    <input\r\n                                        type='password'\r\n                                        className='element-input'\r\n                                        onChange={props.onPwChange}\r\n                                    />\r\n                                }\r\n                            />\r\n                            <ElementLeft\r\n                                content='비밀번호 확인 :'\r\n                            />\r\n                            <ElementRight\r\n                                content={\r\n                                    <>\r\n                                    <input\r\n                                        type='password'\r\n                                        className='element-input'\r\n                                        onChange={props.onCpwChange}\r\n                                    />\r\n                                    <Grid className='errorm'>{props.message}</Grid>\r\n                                    </>\r\n                                }\r\n                            />\r\n                            <Grid item xs={12}>\r\n                                <ColorButton\r\n                                    variant='contained'\r\n                                    className='element-center'\r\n                                    onClick={props.pwChange}\r\n                                    color='primary'\r\n                                >\r\n                                    비밀번호 변경\r\n                                </ColorButton>\r\n                            </Grid></>:''}\r\n                    </Grid>\r\n            </Grid>\r\n        </Grid>\r\n    )\r\n}\r\n\r\nexport default UserInfoView;","import React, { useState } from 'react';\r\nimport { useHistory } from \"react-router-dom\";\r\nimport UserInfoView from './UserInfoView';\r\n\r\nimport { HeaderController } from '../ui';\r\nimport useStore from '../useStore';\r\n\r\nconst { Auth } = useStore();\r\n\r\nconst UserInfoController = ({ viewModel }) => {\r\n    const [data] = useState(Auth.data);\r\n    const [open, setOpen] = useState(false);\r\n    const [pw, setPw] = useState('');\r\n    const [cpw, setCpw] = useState('');\r\n    const [message,setMessage] = useState('');\r\n    const [state,setState] = useState(1);\r\n    const user_id = Auth.isLogged ? Auth.data.user_id:''\r\n    const onPwChange = (e) => {\r\n        if (cpw===''){\r\n            setMessage('');\r\n            setPw(e.target.value);\r\n        }else{\r\n            if(e.target.value===cpw){\r\n                setMessage('');\r\n                setPw(e.target.value);\r\n            }else{\r\n                setMessage('비밀번호가 일치하지 않습니다.');\r\n                setPw(e.target.value);\r\n            }\r\n        }\r\n    }\r\n    const onCpwChange = (e) => {\r\n        if (e.target.value !== pw) {\r\n            setMessage('비밀번호가 일치하지 않습니다.');\r\n            setCpw(e.target.value);\r\n        } else {\r\n            setMessage('');\r\n            setCpw(e.target.value);\r\n        }\r\n    }\r\n    const handleOpen = () => {\r\n        setOpen(true);\r\n    }\r\n    const handleClose = () => {\r\n        setOpen(false);\r\n    }\r\n    const pwChange = async () => {\r\n        if(state===1){\r\n            setPw('');\r\n            setCpw('');\r\n            setMessage('');\r\n            setState(2);\r\n        }else if(state===2){\r\n            if(pw===cpw&&pw!==''){\r\n                await viewModel.changepw(user_id,pw);\r\n                alert('비밀번호가 변경되었습니다.');\r\n            }\r\n            setState(1);\r\n        }\r\n    }\r\n    return (\r\n        <>\r\n        <HeaderController\r\n            header={'회원정보'}\r\n        />\r\n        <UserInfoView\r\n            data={data}\r\n            open={open}\r\n            handleOpen={handleOpen}\r\n            handleClose={handleClose}\r\n            onPwChange={onPwChange}\r\n            onCpwChange={onCpwChange}\r\n            pwChange={pwChange}\r\n            message={message}\r\n            state={state}\r\n        />\r\n        </>\r\n    );\r\n};\r\n\r\nexport default UserInfoController;","import React from 'react';\r\nimport { Grid, Divider,NativeSelect } from '@material-ui/core';\r\n\r\nconst GroupMakeView = (props) => {\r\n    return (\r\n        <Grid container direction='column'>\r\n            <Grid className='contents'>\r\n                <Grid className='logo'>HELP</Grid>\r\n                <Grid className='join_title'>스터디명</Grid>\r\n                <input\r\n                    type='text'\r\n                    className='login' \r\n                    placeholder={'스터디명'}\r\n                    onChange={props.onStudyChange}\r\n                />\r\n                <Grid className='errorm'>{props.message1}</Grid>\r\n                <Grid className='join_title'>최대인원수</Grid>\r\n                <NativeSelect\r\n                    onChange={props.CapacityChange}\r\n                    className='GenderSelect'>\r\n                    <option aria-label=\"\" value=\"\" ></option>\r\n                    <option value=\"1\">1</option>\r\n                    <option value=\"2\">2</option>\r\n\t\t\t\t\t<option value=\"3\">3</option>\r\n\t\t\t\t\t<option value=\"4\">4</option>\r\n\t\t\t\t\t<option value=\"5\">5</option>\r\n\t\t\t\t\t<option value=\"10\">10</option>\r\n\t\t\t\t\t<option value=\"15\">15</option>\r\n\t\t\t\t\t<option value=\"20\">20</option>\r\n                </NativeSelect>\r\n                <Grid className='errorm'>{props.message2}</Grid>\r\n                <button type='button' className='loginbtn' onClick={props.MakeStudy}>스터디생성</button>\r\n                <Divider />\r\n            </Grid>\r\n        </Grid>\r\n    )    \r\n};\r\n\r\nexport default GroupMakeView;\r\n","import React, { useState } from 'react';\r\nimport { useHistory } from \"react-router-dom\";\r\nimport GroupMakeView from './GroupMakeView';\r\nimport { HeaderController } from '../ui';\r\nimport useStore from '../useStore';\r\n\r\nconst GroupMakeController = ({ viewModel }) => {\r\n    const { Auth } = useStore();\r\n\tconst user = Auth.data.user_id;\r\n    const [study, setStudy] = useState('');\r\n    const [capacity, setCapacity] = useState('');\r\n    const [message1,setMessage1] = useState('');\r\n    const [message2,setMessage2] = useState('');\r\n    const history = useHistory();\r\n\t\r\n    const onStudyChange = (e) => {\r\n        if(e.target.value==='')\r\n            setMessage1('스터디명을 입력해주세요.');\r\n        else{\r\n            setStudy(e.target.value);\r\n            setMessage1('');\r\n        }\r\n    };\r\n    const CapacityChange = (e) =>{\r\n        if(e.target.value==='')\r\n            setMessage2('최대인원수를 선택해주세요.');\r\n        else{\r\n            setMessage2('');\r\n            setCapacity(e.target.value);}\r\n    }\r\n    const MakeStudy = async () => {\r\n        if(study==''|| capacity==''){\r\n            alert('모든 정보를 입력해주세요.');\r\n        }else{\r\n            try {\r\n                await viewModel.makeStudy(user,study,capacity);\r\n                alert('스터디가 생성되었습니다.');\r\n                history.replace('/grouplist');\r\n            } catch (e) {\r\n            }\r\n        }\r\n\r\n    }\r\n    \r\n    return (\r\n        <>\r\n            <HeaderController header='그룹생성' />\r\n            <GroupMakeView \r\n                onStudyChange={onStudyChange}\r\n                CapacityChange={CapacityChange}\r\n                message1={message1}\r\n                message2={message2}\r\n                MakeStudy={MakeStudy}\r\n            />\r\n        </>\r\n    );\r\n};\r\n\r\nexport default GroupMakeController;","import React from 'react';\r\nimport { Grid,Button,Divider } from '@material-ui/core';\r\nimport { BoardList,PostList} from '../ui';\r\n\r\nconst BoardView = (props) => {\r\n    return (\r\n        <Grid className='boardmainview'>\r\n            <Grid className='boardview'>\r\n                <BoardList boardlist={props.boardlist} \r\n                            onboardnameChange={props.onboardnameChange}\r\n                            makeboard ={props.makeboard}\r\n                            onClickboard = {props.onClickboard}\r\n                            boardlist={props.boardlist}/>\r\n                {(props.board!=='')?\r\n                <Grid className='element'><Grid className='nameboard'>{props.boardtitle}</Grid>\r\n                {(props.state===1)?<Grid className='board'>\r\n                    <Grid className='boardbtn'>\r\n                        {!props.changestate?\r\n                        <Grid className='boardbtns'><Button className='makebtn' onClick ={props.makepost}>글쓰기</Button>\r\n                        <Button className='makebtn' onClick ={props.deleteboard}>삭제</Button>\r\n                        <Button className='makebtn' onClick ={props.change}>수정</Button></Grid>:\r\n                        <Grid className='boardupdate'><input \r\n                        type='text'\r\n                        className ='boardname'\r\n                        onChange={props.onRename}\r\n                        />\r\n                        <Button className='makebtn' onClick ={props.boardupdate}>수정</Button></Grid> }\r\n                    </Grid>\r\n                    <Divider/>\r\n\r\n                    <PostList onpost={props.onpost} postlist = {props.postlist}/>\r\n                </Grid>:''}\r\n                {(props.state===2)?<Grid className='board'>\r\n                    <Grid className='post'>\r\n                        <textarea\r\n                            type='text'\r\n                            className='title' \r\n                            placeholder={'제목'}\r\n                            onChange={props.ontitleChange}\r\n                        />\r\n                        <textarea\r\n                            type='text'\r\n                            className='content'\r\n                            placeholder={'내용을 입력하세요.'}\r\n                            onChange={props.oncontentChange}\r\n                        />\r\n                        <Grid className='btncol'>\r\n                            <Button className='makebtn' onClick = {props.post}>게시글 올리기</Button>\r\n                            <Button className='makebtn' onClick = {props.back}>돌아가기</Button>\r\n                        </Grid>\r\n                    </Grid>\r\n                </Grid>:''}\r\n                {(props.state===3)?<Grid className='board'>   \r\n                    <Grid className = 'postview'>\r\n                        <Grid className='postviewtitle'>\r\n                            <Grid className='postviewtitlefirst'>\r\n                                <Grid className='title'><p>제 목:</p></Grid>\r\n                                <Grid className='titlename'>{props.posttitle}</Grid>\r\n                            </Grid>\r\n                            <Grid className='postviewtitlesecon'>\r\n                                <Grid className='user'>작성자:</Grid>\r\n                                <Grid className='username'>{props.postuser}</Grid>\r\n                            </Grid>\r\n                            <Grid className='date'>{props.postcreat}</Grid>\r\n                        </Grid>\r\n                        <Grid className='postblank'></Grid>\r\n                        <Grid className='content'>{props.postcontent}</Grid>\r\n                    </Grid>\r\n                    {(props.user_id===props.postuser)?\r\n                    <Grid className ='postbtn'>\r\n                        <Button className='makedelbtn' onClick ={props.deletepost}>글삭제</Button>\r\n                        <Button className='makeupbtn' onClick ={props.postupdatestate}>글수정</Button></Grid>:''}\r\n                </Grid>:''}\r\n                {(props.state===4)?<Grid className='board'>\r\n                    <Grid className='post'>\r\n                        <textarea\r\n                            type='text'\r\n                            className='title' \r\n                            onChange={props.onposttitleChange}\r\n                        >{props.posttitle}</textarea>\r\n                        <textarea\r\n                            type='text'\r\n                            className='content'\r\n                            onChange={props.onpostcontentChange}\r\n                        >{props.postcontent}</textarea>\r\n                        <Grid className='btncol'>\r\n                            <Button className='makebtn' onClick = {props.updatepost}>수정</Button>\r\n                            <Button className='makebtn' onClick = {props.back}>돌아가기</Button>\r\n                        </Grid>\r\n                    </Grid>\r\n                </Grid>:''}\r\n                \r\n            </Grid>:''}\r\n            </Grid>\r\n        </Grid>\r\n    )    \r\n};\r\n\r\nexport default BoardView;","import React, { useState,useEffect } from 'react';\r\n\r\nimport { HeaderController  } from '../ui';\r\nimport BoardView from './BoardView';\r\nimport useStore from '../useStore';\r\nimport { useHistory } from 'react-router-dom';\r\n\r\nconst BoardController = ({ viewModel }) => {\r\n    const { Auth } = useStore();\r\n    const history = useHistory();\r\n    const [boardlist,setBoardlist] = useState([]);\r\n    const [postlist,setPostlist] = useState([]);\r\n    const user_id = Auth.isLogged ? Auth.data.user_id:''\r\n    const [board_name,setBoard_name] = useState('');\r\n    const [board,setBoard] = useState('');\r\n    const [boardtitle,setBoardtitle] = useState('');\r\n    const [changestate,setChangestate] = useState(false);\r\n    const [rename,setRename] = useState('');\r\n    const [state,setState] = useState(1);\r\n    const [postid,setPostid] = useState('');\r\n    const [title,setTitle] = useState('');\r\n    const [content,setContent] = useState('');\r\n    const [posttitle,setPosttitle] = useState('');\r\n    const [postcontent,setPostcontent] = useState('');\r\n    const [postcreat,setPostcreate] = useState('');\r\n    const [postuser,setPostuser] = useState('');\r\n    const [updatetitle,setUpdatetitle] = useState('');\r\n    const [updatecontent,setUpdatecontent] = useState('');\r\n\r\n\r\n    const ontitleChange = (e) => {\r\n        setTitle(e.target.value);\r\n    }\r\n    const oncontentChange = (e) => {\r\n        setContent(e.target.value);\r\n    }\r\n    const post =() =>{\r\n        if(title ===''){\r\n            alert('제목을 적어주세요.');\r\n        }\r\n        else if(content === '') {\r\n            alert('내용을 작성하지 않았습니다.');\r\n        }\r\n        else{\r\n            viewModel.makepost(board,user_id,title,content);\r\n            setState(1);\r\n            setBoard(board);\r\n            onboard(board);\r\n        }\r\n    }\r\n    const getboardlist = async (del) => {\r\n        const test = await viewModel.boardlist();\r\n        const status = test?.status;\r\n\r\n        if(test.data.length !==0){\r\n            if(board===''){\r\n                setBoard(test.data[0].board_id);\r\n                setBoardtitle(test.data[0].board_name);\r\n                onboard(test.data[0].board_id);}\r\n            else if(del===1){\r\n                setBoard(test.data[0].board_id);\r\n                setBoardtitle(test.data[0].board_name);\r\n                onboard(test.data[0].board_id);\r\n            }else{\r\n                setBoard(board);\r\n                onboard(board);\r\n            }\r\n        }\r\n        if (status === 200) {\r\n            setBoardlist(test.data);\r\n        }\r\n        else {\r\n            alert('내부 서버 오류입니다.');\r\n        }\r\n    }\r\n    useEffect(() => {\r\n        getboardlist(0);\r\n      },[]);\r\n\r\n    const makeboard = ()=>{\r\n        if(Auth.isLogged === false){ history.replace('/login');}\r\n        else{\r\n            if(board_name===''){\r\n                alert('게시판 이름을 작성해야합니다.');\r\n            }\r\n            else{\r\n                viewModel.makeboard(user_id, board_name);\r\n                setBoard_name('');\r\n                getboardlist(0);\r\n            }\r\n        }\r\n    }\r\n    const onboardnameChange= (e) =>{\r\n        setBoard_name(e.target.value);\r\n    }\r\n    const onClickboard =(board_id,title)=>{\r\n        setBoardtitle(title);\r\n        onboard(board_id);\r\n    }\r\n    const onboard= async(board_id) =>{\r\n        setBoard(board_id);\r\n        const test = await viewModel.boardpostlist(board_id);\r\n        setTitle('');\r\n        setContent('');\r\n        setRename('');\r\n        setState(1);\r\n        setPostlist(test.data);\r\n        setChangestate(false);\r\n    }\r\n    const onpost= (post_id) =>{\r\n        setTitle('');\r\n        setContent('');\r\n        setRename('');\r\n        setState(3);\r\n        getdetail(post_id);\r\n    }\r\n    const deleteboard = () =>{\r\n        viewModel.board_delete(user_id,board);\r\n        getboardlist(1);\r\n    }\r\n    const makepost = ()=>{\r\n        if(Auth.isLogged === false){ history.replace('/login');}\r\n        else{\r\n            setTitle('');\r\n            setContent('');\r\n            setRename('');\r\n            setState(2);\r\n            /*{history.push({\r\n                pathname: \"/postmake\",\r\n                state: {board_id: board}\r\n              })}*/\r\n        }\r\n    }\r\n    const boardupdate =() =>{\r\n        if(rename===''){setChangestate(false);}\r\n        else{\r\n            setBoardtitle(rename);\r\n            viewModel.board_update(board,rename,user_id);\r\n            setRename('');\r\n            setChangestate(false);\r\n            getboardlist(0);\r\n        }\r\n    }\r\n    const change =() =>{\r\n        setChangestate(true);\r\n    }\r\n    const onRename =(e) =>{\r\n        setRename(e.target.value);\r\n    }\r\n    const getdetail = async (post_id) => {\r\n        const test = await viewModel.postdetail(post_id);\r\n        const status = test?.status;\r\n        const data = test.data\r\n        setPostid(data.post_id);\r\n        setPosttitle(data.post_title);\r\n        setPostcontent(data.post_content);\r\n        const alltime = data.updated_at;\r\n        const idx = alltime.indexOf(\"T\");\r\n        const date = alltime.substring(0,idx);\r\n        setPostcreate(date);\r\n        setPostuser(data.user_id);\r\n        if (status === 200) {\r\n            \r\n        }\r\n        else {\r\n            alert('내부 서버 오류입니다.');\r\n        }\r\n    }\r\n    const deletepost =()=>{//post_id, user_id\r\n        viewModel.deletepost(postid,user_id);\r\n        onboard(board);\r\n        setState(1);\r\n    }\r\n    \r\n    const postupdatestate=()=>{//post_id, user_id, post_title, post_content\r\n        setState(4);\r\n    }\r\n    const onposttitleChange = (e) => {\r\n        setUpdatetitle(e.target.value);\r\n    }\r\n    const onpostcontentChange = (e) => {\r\n        setUpdatecontent(e.target.value);\r\n    }\r\n    \r\n    const updatepost=()=>{//post_id, user_id, post_title, post_content\r\n        viewModel.updatepost(postid, user_id, updatetitle, updatecontent);\r\n        setState(1);\r\n        onboard(board);\r\n    }\r\n    const back=()=>{\r\n        if(state===2){setState(1);}\r\n        else{setState(3);}\r\n        \r\n    }\r\n    return (\r\n        <>\r\n        <HeaderController header='게시판' />\r\n        <BoardView \r\n            onboardnameChange={onboardnameChange}\r\n            makeboard={makeboard}\r\n            makepost={makepost}\r\n            onboard={onboard}\r\n            onpost={onpost}\r\n            deleteboard={deleteboard}\r\n            boardupdate={boardupdate}\r\n            change={change}\r\n            onRename={onRename}\r\n            ontitleChange={ontitleChange}\r\n            oncontentChange={oncontentChange}\r\n            post={post}\r\n            deletepost={deletepost}\r\n            updatepost={updatepost}\r\n            onposttitleChange={onposttitleChange}\r\n            onpostcontentChange={onpostcontentChange}\r\n            postupdatestate={postupdatestate}\r\n            onClickboard={onClickboard}\r\n            back={back}\r\n            board={board}\r\n            user_id={user_id}\r\n            state={state}\r\n            boardlist = {boardlist}\r\n            postlist = {postlist}\r\n            changestate={changestate}\r\n            posttitle={posttitle}\r\n            postcontent={postcontent}\r\n            postcreat={postcreat}\r\n            postuser={postuser}\r\n            boardtitle={boardtitle}/>\r\n        </>\r\n    );\r\n};\r\n\r\nexport default BoardController;","import React from 'react';\r\nimport { Grid, Divider } from '@material-ui/core';\r\nimport { Link } from 'react-router-dom';\r\n\r\nconst IdView = (props) => {\r\n    return (\r\n        <Grid container direction='column'>\r\n            <Grid className='contents'>\r\n                <Grid className='logo'>HELP</Grid>\r\n                    <Grid className='join_title'>이메일</Grid>\r\n                    <input\r\n                        type=\"email\"\r\n                        className='login'\r\n                        placeholder={'email'}\r\n                        onChange={props.onEmailChange}\r\n                    />\r\n                    <button type='button' className='loginbtn' onClick={props.find}>아이디 찾기</button>\r\n                    <Divider/>\r\n                    <Grid className='link'>\r\n                        <Link className='a' to={'/login'}>로그인</Link>|\r\n                        <Link className='a' to={'/findpw'}>비밀번호 찾기</Link>|\r\n                        <Link className='a' to={'/signup'}>회원가입</Link>\r\n                    </Grid>\r\n            </Grid>\r\n        </Grid>\r\n    )    \r\n};\r\n\r\nexport default IdView;","import React, { useState } from 'react';\r\nimport { useHistory } from \"react-router-dom\";\r\nimport IdView from './IdView';\r\nimport { HeaderController } from '../ui';\r\n\r\nconst IdController = ({ viewModel }) => {\r\n    const [email, setEmail] = useState('');\r\n    const history = useHistory();\r\n\r\n    const onEmailChange = (e) => {\r\n        setEmail(e.target.value);\r\n    }\r\n    const find = async () => {\r\n        const connect = await viewModel.findid(email);\r\n        const status = connect?.status;\r\n        if (status === 200) {\r\n            alert('당신의 아이디는'+connect.data.user_id+'입니다.');\r\n            history.replace('/login');\r\n        } else if (status === 404 || status === 403) {\r\n            if(email===''){\r\n                alert('email을 작성하셔야 합니다.');\r\n            }\r\n            else{\r\n            alert(connect.data.detail);}\r\n        } else {\r\n            alert('내부 서버 오류입니다.');\r\n        }\r\n    }\r\n    return (\r\n        <>\r\n        <HeaderController\r\n            header={'아이디찾기'}\r\n        />\r\n        <IdView\r\n            onEmailChange={onEmailChange}\r\n            find={find}\r\n        />\r\n        </>\r\n    );\r\n};\r\n\r\nexport default IdController;","import React from 'react';\r\nimport { Grid, Divider, NativeSelect } from '@material-ui/core';\r\nimport { Link } from 'react-router-dom';\r\n\r\nconst PwView = (props) => {\r\n    return (\r\n        <Grid container direction='column'>\r\n            <Grid className='contents'>\r\n                <Grid className='logo'>HELP</Grid>\r\n                    <Grid className='join_title'>아이디</Grid>\r\n                    <input\r\n                        type='text'\r\n                        className='login'\r\n                        placeholder={'아이디'}\r\n                        onChange={props.onIdChange}\r\n                    />\r\n                    <Grid className='join_title'>이름</Grid>\r\n                    <input\r\n                        type=\"text\"\r\n                        className='login'\r\n                        placeholder={'이름'}\r\n                        onChange={props.onNameChange}\r\n                    />\r\n                    <Grid className='join_title'>힌트</Grid>\r\n                    <NativeSelect\r\n                        onChange={props.onQuestChange}\r\n                        className='GenderSelect'>\r\n                        <option aria-label=\"\" value=\"\" >질문</option>\r\n                        <option value=\"1\">당신의 아버지 성함은?</option>\r\n                        <option value=\"2\">당신의 어머니 성함은?</option>\r\n                        <option value=\"3\">당신이 사는 지역은?</option>\r\n                        <option value=\"4\">당신의 모교는?</option>\r\n                    </NativeSelect>\r\n                    <input\r\n                        type=\"text\"\r\n                        className='login'\r\n                        placeholder={'힌트대답'}\r\n                        onChange={props.onHintChange}\r\n                    />\r\n                    <button type='button' className='loginbtn' onClick ={props.findPw}>비밀번호 찾기</button>\r\n                    <Divider/>\r\n                    <Grid className='link'>\r\n                        <Link className='a' to={'/login'}>로그인</Link>|\r\n                        <Link className='a' to={'/findid'}>아이디 찾기</Link>|\r\n                        <Link className='a' to={'/signup'}>회원가입</Link>\r\n                    </Grid>\r\n            </Grid>\r\n        </Grid>\r\n    )    \r\n};\r\n\r\nexport default PwView;","import React, { useState } from 'react';\r\nimport { useHistory } from \"react-router-dom\";\r\nimport PwView from './PwView';\r\nimport { HeaderController } from '../ui';\r\n\r\nconst PwController = ({ viewModel }) => {\r\n    const history = useHistory();\r\n    const [quest, setQuest] = useState('');\r\n    const [hint, setHint] = useState('');\r\n    const [userid, setUserid] = useState('');\r\n    const [name, setName] = useState('');\r\n\r\n    const onHintChange = (e) =>{\r\n        setHint(e.target.value);\r\n    }\r\n    const onQuestChange = (e) =>{\r\n        setQuest(e.target.value);\r\n    }\r\n    const onNameChange = (e) =>{\r\n        setName(e.target.value);\r\n    }\r\n    const onIdChange = (e) =>{\r\n        setUserid(e.target.value);\r\n    }\r\n    const findPw = async() =>{\r\n        if(quest==='' || hint==='' || name==='' || userid===''){\r\n            alert('위의 항목들을 모두 작성해야합니다.');\r\n        }else{\r\n            const connect = await viewModel.findpw(userid,name,quest,hint);\r\n            const status = connect?.status;\r\n            if (status === 200) {\r\n                alert(userid+'아이디의 비밀번호는'+connect.data.user_pw+'입니다.');\r\n                history.replace('/login');\r\n            } else if (status === 403) {\r\n                alert(connect.data.message);\r\n            }else if(status === 404){\r\n                alert(connect.data.detail);\r\n            }\r\n             else {\r\n                alert('내부 서버 오류입니다.');\r\n            }\r\n        }\r\n    }\r\n    const find = async () => {\r\n        \r\n    }\r\n\r\n    return (\r\n        <>\r\n        <HeaderController\r\n            header={'비밀번호찾기'}\r\n        />\r\n        <PwView\r\n            onHintChange={onHintChange}\r\n            onQuestChange={onQuestChange}\r\n            onNameChange={onNameChange}\r\n            onIdChange={onIdChange}\r\n            findPw={findPw}\r\n        />\r\n        </>\r\n    );\r\n};\r\n\r\nexport default PwController;","import React from 'react';\r\nimport { Grid } from '@material-ui/core';\r\nimport { GroupForm  } from '../ui';\r\n\r\nconst MystudyView = (props) => {\r\n    return (\r\n        <Grid container direction='column'>\r\n            <Grid className ='grouplist'>\r\n                    <GroupForm groupdata = {props.groupdata}/>\r\n            </Grid>\r\n        </Grid>\r\n    )    \r\n};\r\n\r\nexport default MystudyView;","import React, { useState,useEffect } from 'react';\r\n\r\nimport { HeaderController } from '../ui';\r\nimport MystudyView from './MystudyView';\r\nimport { useHistory } from 'react-router-dom';\r\nimport useStore from '../useStore';\r\n\r\n\r\nconst MystudyController = ({ viewModel }) => {\r\n    const [list,setList] = useState([]);\r\n    const { Auth } = useStore();\r\n    const history = useHistory();\r\n    const id = Auth.isLogged ? Auth.data.user_id:'';\r\n\r\n    const getlist = async () => {\r\n        const test = await viewModel.mylist(id);\r\n        const status = test?.status;\r\n        setList(test.data);\r\n        if (status === 200) {\r\n            \r\n        }\r\n        else {\r\n            alert('내부 서버 오류입니다.');\r\n        }\r\n    }\r\n    useEffect(() => {\r\n        getlist();\r\n      },[]);\r\n    return (\r\n        <>\r\n            <HeaderController header='내스터디' />\r\n            <MystudyView \r\n                groupdata = {list}\r\n            />\r\n        </>\r\n    );\r\n};\r\n\r\nexport default MystudyController;","import React, { useState, useEffect } from 'react';\r\n\r\nconst Test = () => {\r\n  const [test, setTest] = useState('1234');\r\n  useEffect(() => {\r\n    let socketPath = 'ws://127.0.0.1:8000/ws/helpapp/' + 'abcd';\r\n\r\n    const socket = new WebSocket(socketPath);\r\n    socket.onopen = function () {\r\n      socket.send(\r\n        JSON.stringify({\r\n          room_name: 'abcd',\r\n          message: 'efgh',\r\n        }),\r\n      );\r\n    };\r\n  }, [])\r\n  return(\r\n    <div>\r\n      {test}\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default Test;","class ViewModel {\r\n    constructor(model) {\r\n       this.model = model;\r\n       this.login = this.login.bind(this);\r\n    }\r\n    makeStudy = (user, study, capacity) => {\r\n        return this.model.makeStudy(user, study, capacity);\r\n    }\r\n    userInfo = () => {\r\n        return this.model.userInfo();\r\n    }\r\n    login = (id, pw) => {\r\n        return this.model.login(id, pw);\r\n    }\r\n    signUp = (id, pw, name, gender, email, quest, hint) => {\r\n        return this.model.signUp(id, pw, name, gender, email, quest, hint);\r\n    }\r\n    exercise = (expart, times, btn) => {\r\n        return this.model.exercise(expart, times, btn);\r\n    }\r\n\r\n    join = (user,study) => {\r\n        return this.model.join(user,study);\r\n    }\r\n    disjoin = (user,study) => {\r\n        return this.model.disjoin(user,study);\r\n    }\r\n    list = async() => {\r\n        return await this.model.list();\r\n    }\r\n    member = async(study_id) => {\r\n        return await this.model.member(study_id);\r\n    }\r\n    study_detail = async(study_id) => {\r\n        return await this.model.study_detail(study_id);\r\n    }\r\n    boardlist = async() => {\r\n        return await this.model.boardlist();\r\n    }\r\n    makeboard = async(user_id, board_name) => {\r\n        return await this.model.makeboard(user_id, board_name);\r\n    }\r\n    board_search = async(board_id) => {\r\n        return await this.model.board_search(board_id);\r\n    }\r\n    board_update = async(board_id,board_name,user_id) => {\r\n        return await this.model.board_update(board_id,board_name,user_id);\r\n    }\r\n    board_delete = async(user_id,board_id) => {\r\n        return await this.model.board_delete(user_id,board_id);\r\n    }\r\n    boardpostlist = async(board_id) => {\r\n        return await this.model.boardpostlist(board_id);\r\n    }\r\n    makepost = async(board_id,user_id,post_title,post_content) => {\r\n        return await this.model.makepost(board_id,user_id,post_title,post_content);\r\n    }\r\n    postdetail = async(post_id) => {\r\n        return await this.model.postdetail(post_id);\r\n    }\r\n    updatepost = async(post_id, user_id, post_title, post_content) => {\r\n        return await this.model.updatepost(post_id, user_id, post_title, post_content);\r\n    }\r\n    deletepost = async(post_id, user_id) => {\r\n        return await this.model.deletepost(post_id, user_id);\r\n    }\r\n    findid = (email) => {\r\n        return this.model.findid(email);\r\n    }\r\n    findpw = (userid,user_name,quest,hint) => {\r\n        return this.model.findpw(userid,user_name,quest,hint);\r\n    }\r\n    changepw = (user_id,user_pw)=>{\r\n        return this.model.changepw(user_id,user_pw);\r\n    }\r\n    mylist = async(user_id) => {\r\n        return await this.model.mylist(user_id);\r\n    }\r\n}\r\n\r\nexport default ViewModel;","import { ContactSupportOutlined } from '@material-ui/icons';\r\nimport axios from 'axios';\r\n\r\nimport useStore from './useStore';\r\n\r\nconst { Auth } = useStore();\r\n\r\nclass Model {\r\n    constructor() {\r\n        this.login = this.login.bind(this);\r\n    }\r\n    // 스터디 생성\r\n    makeStudy(user, study, capacity) {\r\n        axios.post('/studies/new', {\r\n            user_id: user,\r\n            study_name:study,\r\n            capacity: capacity,\r\n        })\r\n        .then((res) => {\r\n        })\r\n        .catch((e) => {\r\n        });\r\n    }\r\n    // 로그인\r\n    login = (id, pw) => {\r\n        this.loginData = {\r\n            id,\r\n            pw,\r\n        };\r\n        const result = axios.post('/login', {\r\n            user_id: id,\r\n            user_pw: pw\r\n        })\r\n        .then((res) => {\r\n            this.loginSuccess(res);\r\n            return res;\r\n        })\r\n        .catch((error) => {\r\n            return error.response;\r\n        });\r\n        return result;\r\n    }\r\n    silentRefresh = () => {\r\n        axios.post('/silent-refresh', this.loginData)\r\n        .then(this.loginSuccess)\r\n        .catch(() => {\r\n            Auth.logout();\r\n        });\r\n    }\r\n    loginSuccess = (response) => {\r\n        const accessToken = response.data;\r\n        Auth.login(response.data);\r\n        axios.defaults.headers.common['Authorization'] = `Bearer ${accessToken}`;\r\n\r\n        // setTimeout(this.silentRefresh, JWT_EXPIRY_TIME - 60000)\r\n    }\r\n    userInfo = (id) => {\r\n        const result = axios.post('/users/' + id)\r\n        .then((res) => {\r\n            Auth.data = res;\r\n            return res;\r\n        })\r\n        .catch((err) => {\r\n            return err.response;\r\n        })\r\n        return result;\r\n    }\r\n    // 회원가입\r\n    signUp(id, pw, name,gender, email, quest, hint) {\r\n        const result = axios.post('/users/new', {\r\n            user_id: id,\r\n            user_pw: pw,\r\n            user_name: name,\r\n            gender: gender,\r\n            question_number: Number(quest),\r\n            hint: hint,\r\n            email: email\r\n        })\r\n        .then((res) => {\r\n            return res;\r\n        })\r\n        .catch((err) => {\r\n            return err.response;\r\n        })\r\n        return result;\r\n    }\r\n    // 운동\r\n    exercise(expart, times, btn) {\r\n        let socketPath = 'ws://10.178.0.2:8000/ws/helpapp/' + Auth.data.user_id;\r\n        const socket = new WebSocket(socketPath);\r\n\r\n        socket.onopen = function () {\r\n            socket.send(\r\n                JSON.stringify({\r\n                    user_id: Auth.data.user_id,\r\n                    time: times,\r\n                    expart: expart,\r\n                    btn: btn\r\n                })\r\n            )\r\n        }\r\n    }\r\n    //가입\r\n    join(user,study) {\r\n        axios.post('../studies/'+study+'/join', {\r\n            study_id: study,\r\n            user_id: user\r\n        })\r\n        .then((res) => {\r\n            return res;\r\n        })\r\n        .catch((e) => {\r\n        });\r\n    }\r\n    //탈퇴\r\n    disjoin(user,study) {\r\n        axios.post('../studies/'+study+'/disjoin', {\r\n            study_id: study,\r\n            user_id: user\r\n        })\r\n        .then((res) => {\r\n            return res;\r\n        })\r\n        .catch((e) => {\r\n        });\r\n    }\r\n    //스터디 목록\r\n    list = () => { \r\n        let data = axios.get('/studies')\r\n            .then((res)=>{\r\n                return res;});\r\n        return data;\r\n    }\r\n    //스터디 세부정보\r\n    study_detail = (study_id) =>{ \r\n        let data = axios.post('../../studies/'+study_id,{\r\n            study_id: study_id})\r\n            .then((res)=>{\r\n                return res;});\r\n        return data;\r\n    }\r\n    //스터디내의 유저들정보\r\n    member = (study_id) =>{ \r\n        let data = axios.post('../../studies/'+study_id+'/userlist',{\r\n            study_id: study_id\r\n        })\r\n            .then((res)=>{\r\n                return res;});\r\n        return data;\r\n    }\r\n    //게시판 리스트\r\n    boardlist = () =>{ \r\n        let data = axios.get('/boards')\r\n            .then((res)=>{\r\n                return res;});\r\n        return data;\r\n    }\r\n    //게시판 생성\r\n   makeboard = (user_id, board_name) =>{ \r\n    let data = axios.post('/boards/new',{\r\n        user_id: user_id, \r\n        board_name: board_name\r\n    })\r\n        .then((res)=>{\r\n            return res;});\r\n    return data;\r\n    }\r\n   //게시판 조회\r\n   board_search = (board_id) =>{ \r\n    let data = axios.post('/boards/'+board_id,{\r\n        board_id: board_id\r\n    })\r\n        .then((res)=>{\r\n            return res;});\r\n    return data;\r\n    }\r\n    //게시판 수정\r\n    board_update = (board_id,board_name,user_id) =>{ \r\n    let data = axios.post('/boards/'+board_id+'/update',{\r\n        board_id: board_id,\r\n        board_name: board_name,\r\n        user_id: user_id\r\n    })\r\n        .then((res)=>{\r\n            return res;});\r\n    return data;\r\n    }\r\n    //게시판 삭제\r\n    board_delete = (user_id,board_id) =>{ \r\n    let data = axios.post('/boards/'+board_id+'/delete',{\r\n        user_id: user_id,\r\n        board_id: board_id\r\n    })\r\n        .then((res)=>{\r\n            return res;});\r\n    return data;\r\n    }\r\n    //특정 게시판글들 조회\r\n    boardpostlist = (board_id) =>{ \r\n    let data = axios.post('/boards/'+board_id+'/board_postlist',{\r\n        board_id: board_id\r\n    })\r\n        .then((res)=>{\r\n            return res;});\r\n    return data;\r\n    }\r\n    //게시판글 작성\r\n    makepost= (board_id,user_id,post_title,post_content) =>{ \r\n    let data = axios.post('/posts/new',{\r\n        board_id: board_id,\r\n        user_id: user_id,\r\n        post_title: post_title,\r\n        post_content: post_content\r\n    })\r\n        .then((res)=>{\r\n            return res;});\r\n    return data;\r\n    }\r\n    //특정 게시글 조회\r\n    postdetail = (post_id) =>{ \r\n        let data = axios.post('/posts/'+post_id,{\r\n            post_id: post_id\r\n        })\r\n            .then((res)=>{\r\n                return res;});\r\n        return data;\r\n    }\r\n    //특정 게시글 수정\r\n    updatepost = (post_id, user_id, post_title, post_content) =>{ \r\n        let data = axios.post('/posts/'+post_id+'/update',{\r\n            post_id: post_id,\r\n            user_id: user_id,\r\n            post_title: post_title,\r\n            post_content: post_content\r\n\r\n        })\r\n            .then((res)=>{\r\n                return res;});\r\n        return data;\r\n    }\r\n    //특정 게시글 삭제\r\n    deletepost = (post_id, user_id) =>{ \r\n        let data = axios.post('/posts/'+post_id+'/delete',{\r\n            post_id: post_id,\r\n            user_id: user_id\r\n        })\r\n            .then((res)=>{\r\n                return res;});\r\n        return data;\r\n    }\r\n    findid =(email)=>{\r\n        const data = axios.post('/users/find_id',{\r\n            email: email\r\n        })\r\n        .then((res)=>{\r\n            return res;})\r\n        .catch((error) => {\r\n            return error.response;\r\n        });\r\n        return data;\r\n    }\r\n    findpw =(userid,user_name,quest,hint)=>{\r\n        const data = axios.post('/users/find_pw',{\r\n            user_id: userid, \r\n            user_name: user_name, \r\n            question_number: Number(quest),\r\n            hint: hint\r\n        })\r\n        .then((res)=>{\r\n            return res;})\r\n        .catch((error) => {\r\n            return error.response;\r\n        });\r\n        return data;\r\n    }\r\n    //비밀번호변경\r\n    changepw = (id, pw) => {\r\n        this.loginData = {\r\n            id,\r\n            pw,\r\n        };\r\n        const result = axios.post('/users/change_pw', {\r\n            user_id: id,\r\n            user_pw: pw\r\n        })\r\n        .then((res) => {\r\n            this.loginSuccess(res);\r\n            return res;\r\n        })\r\n        .catch((error) => {\r\n            return error.response;\r\n        });\r\n        return result;\r\n    }\r\n    //내 스터디 목록\r\n    mylist = (user_id) =>{ \r\n        const data = axios.post('users/'+user_id+'/mygroups',{\r\n            user_id: user_id\r\n        })\r\n            .then((res)=>{\r\n                return res;});\r\n        return data;\r\n    }\r\n    \r\n}\r\n\r\nexport default Model;","import React from 'react';\r\nimport { BrowserRouter, Switch, Route } from 'react-router-dom';\r\n\r\nimport {\r\n    HomeController, LoginController, SignUpController, GroupMakeController, GroupListController, GroupController,\r\n    UserInfoController, BoardController, Test ,IdController, PwController, MystudyController\r\n} from './view';\r\nimport ViewModel from './ViewModel'; \r\nimport Model from './Model';\r\n\r\nconst Provider = () => {\r\n    const model = new Model();\r\n    const viewModel = new ViewModel(model);\r\n    return (\r\n        <BrowserRouter>\r\n            <Switch>\r\n                <Route exact path='/' render={ () => <HomeController viewModel={viewModel} /> } />\r\n                <Route path='/login' render={ () => <LoginController viewModel={viewModel} /> } />\r\n                <Route path='/signup' render={ () => <SignUpController viewModel={viewModel} /> } />\r\n                <Route path='/groupmake' render={ () => <GroupMakeController viewModel={viewModel} /> } />\r\n                <Route path='/grouplist' render={ () => <GroupListController viewModel={viewModel} /> } />\r\n                <Route path='/group' render={ () => <GroupController viewModel={viewModel} /> } />\r\n                <Route path='/info' render={ () => <UserInfoController viewModel={viewModel} /> } />\r\n                <Route path='/board' render={ () => <BoardController viewModel={viewModel} /> } />\r\n                <Route path='/findid' render={ () => <IdController viewModel={viewModel} /> } />\r\n                <Route path='/findpw' render={ () => <PwController viewModel={viewModel} /> } />\r\n                <Route path='/mygroup' render={ () => <MystudyController viewModel={viewModel} /> } />\r\n                <Route path='/test' render={ () => <Test viewModel={viewModel} /> } />\r\n            </Switch>\r\n        </BrowserRouter>\r\n    )\r\n}\r\n\r\nexport default Provider;\r\n","import React from 'react'\r\nimport axios from 'axios';\r\n\r\nimport Provider from './components/Provider';\r\n\r\nimport './scss/main.scss';\r\n\r\nimport useStore from './components/useStore';\r\n\r\naxios.defaults.xsrfCookieName = 'csrftoken';\r\naxios.defaults.xsrfHeaderName = 'x-CSRFToken';\r\naxios.defaults.withCredentials = true\r\n\r\nfunction App() {\r\n  const { Auth } = useStore();\r\n  Auth.init();\r\n  return (\r\n    <Provider />\r\n  );\r\n}\r\n\r\nexport default App;\r\n\r\n","const reportWebVitals = onPerfEntry => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport reportWebVitals from './reportWebVitals';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n"],"sourceRoot":""}